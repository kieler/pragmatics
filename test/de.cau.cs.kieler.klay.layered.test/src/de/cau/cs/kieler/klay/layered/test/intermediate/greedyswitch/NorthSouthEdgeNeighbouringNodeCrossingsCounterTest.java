/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2015 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
package de.cau.cs.kieler.klay.layered.test.intermediate.greedyswitch;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import org.junit.Test;

import de.cau.cs.kieler.kiml.options.EdgeRouting;
import de.cau.cs.kieler.kiml.options.LayoutOptions;
import de.cau.cs.kieler.kiml.options.PortConstraints;
import de.cau.cs.kieler.kiml.options.PortSide;
import de.cau.cs.kieler.klay.layered.graph.LNode;
import de.cau.cs.kieler.klay.layered.graph.LPort;
import de.cau.cs.kieler.klay.layered.intermediate.greedyswitch.NorthSouthEdgeNeighbouringNodeCrossingsCounter;

/**
 * Tests counting crosses generated by the ordering of north south ports.
 * 
 * @author alan
 *
 */
public class NorthSouthEdgeNeighbouringNodeCrossingsCounterTest extends
        NorthSouthEdgeTestGraphCreator {
    private NorthSouthEdgeNeighbouringNodeCrossingsCounter counter;
    private LNode[] layer;

    // CHECKSTYLEOFF javadoc
    // CHECKSTYLEOFF MagicNumber

    @Test
    public void noNorthSouthNode() {
        getCrossFormedGraph();
        countCrossingsInLayerBetweenNodes(0, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void southernNorthSouthNodeCrossing() {
        getNorthSouthDownwardCrossingGraph();
        countCrossingsInLayerBetweenNodes(0, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void northernNorthSouthNodeCrossings() {
        getNorthSouthUpwardCrossingGraph();

        countCrossingsInLayerBetweenNodes(0, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void oneNodeIsLongEdgeDummy() {
        getSouthernNorthSouthDummyEdgeCrossingGraph();
        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        switchNodes(1, 2);

        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void oneNodeIsLongEdgeDummyNorthern() {
        getNorthernNorthSouthDummyEdgeCrossingGraph();
        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        switchNodes(0, 1);

        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void noFixedOrderConstraint() {
        getNorthSouthDownwardCrossingGraph();
        getCurrentOrder()[0][0].setProperty(LayoutOptions.PORT_CONSTRAINTS,
                PortConstraints.FIXED_SIDE);
        countCrossingsInLayerBetweenNodes(0, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void withNormalNode() {
        getNorthSouthDownwardCrossingGraph();
        countCrossingsInLayerBetweenNodes(0, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void northSouthEdgesComeFromBothSidesDontCross() {
        getSouthernNorthSouthGraphEdgesFromEastAndWestNoCrossings();
        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        getNorthernNorthSouthGraphEdgesFromEastAndWestNoCrossings();
        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void southernNorthSouthEdgesBothToEast() {
        getSouthernNorthSouthEdgesBothToEast();
        countCrossingsInLayerBetweenNodes(0, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void crossingsWithNorthSouthPortsBelongingToDifferentNodesShouldNotBeCounted() {
        getGraphWhereLayoutUnitPreventsSwitch();
        countCrossingsInLayerBetweenNodes(0, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void northSouthEdgesComeFromBothSidesDoCross() {
        getNorthSouthEdgesFromEastAndWestAndCross();
        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(1));

    }

    @Test
    public void switchNodesAndRecount() {
        getNorthSouthUpwardCrossingGraph();
        countCrossingsInLayerBetweenNodes(0, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
        switchAndRecount(0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void southPortOndNormalNodeBelowLongEdgeDummy() {
        getSouthPortOnNormalNodeBelowLongEdgeDummy();

        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
        switchAndRecount(0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void northPortOndNormalNodeAboveLongEdgeDummy() {
        getNorthPortOndNormalNodeAboveLongEdgeDummy();

        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
        switchAndRecount(1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    private void switchAndRecount(final int upperNodeIndex, final int lowerNodeIndex) {
        switchNodes(upperNodeIndex, lowerNodeIndex);
        counter.countCrossings(layer[upperNodeIndex], layer[lowerNodeIndex]);
    }

    @Test
    public void southernTwoWesternEdges() {
        getNorthSouthSouthernTwoWesternEdges();
        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
        switchAndRecount(1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void southernWesternPortToEastAndEasternPortToWest() {
        getNorthSouthSouthernWesternPortToEastAndEasternPortToWest();
        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(1));
        switchAndRecount(1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void northernBothEdgesWestern() {
        getNorthSouthNorthernWesternEdges();
        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
        switchAndRecount(0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void northernEasternPortToWestWesternPortToEast() {
        getNorthSouthNorthernEasternPortToWestWesternPortToEast();
        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(1));
        switchAndRecount(0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void normalNodesNorthSouthEdgesHaveCrossingsToLongEdgeDummy() {
        getNorthernNorthSouthDummyEdgeCrossingGraph();

        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        countCrossingsInLayerBetweenNodes(1, 1, 2);

        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        getSouthernNorthSouthDummyEdgeCrossingGraph();

        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        countCrossingsInLayerBetweenNodes(1, 1, 2);

        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void normalNodesNorthSouthEdgesHaveCrossingsToLongEdgeDummyOnBothSides() {
        getMultipleNorthSouthAndLongEdgeDummiesOnBothSides();
        countCrossingsInLayerBetweenNodes(1, 2, 3);

        assertThat(counter.getUpperLowerCrossings(), is(2));
        assertThat(counter.getLowerUpperCrossings(), is(2));
    }

    @Test
    public void ignoresUnconnectedPortsForNormalNodeAndLongEdgeDummies() {
        getLongEdgeDummyAndNormalNodeWithUnusedPortsOnSouthernSide();
        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(0));

        getLongEdgeDummyAndNormalNodeWithUnusedPortsOnNorthernSide();
        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(0));
    }

    @Test
    public void oneEdgeWestOneEdgeEastDontCross() {
        getNorthernNorthSouthGraphEdgesFromEastAndWestNoCrossings();
        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void oneEdgeEastOneEdgeWestDontCross() {
        getNorthernNorthSouthGraphEdgesFromEastAndWestNoCrossingsUpperEdgeEast();

        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    /**
     * <pre>
     * 
     * *----
     *    /+--* 
     *   --+--*
     *   | |
     *  _|_|_
     *  |   |
     *  |___|
     *  .
     * </pre>
     * 
     */
    @Test
    public void givenPolylineRoutingWhenMoreThanOneEdgeIntoNSNode_countsTheseToo() {
        LNode leftNode = addNodeToLayer(makeLayer());
        LNode[] middleNodes = addNodesToLayer(3, makeLayer());
        LNode[] rightNodes = addNodesToLayer(2, makeLayer());

        setFixedOrderConstraint(middleNodes[2]);

        // ports are added in clockwise fashion!
        addNorthSouthEdge(PortSide.NORTH, middleNodes[2], middleNodes[1], rightNodes[0], false);
        addNorthSouthEdge(PortSide.NORTH, middleNodes[2], middleNodes[0], leftNode, true);
        // second edge on middle node
        LPort middleNodePort = middleNodes[1].getPorts().get(0);
        eastWestEdgeFromTo(middleNodePort, rightNodes[1]);
        getGraph().setProperty(LayoutOptions.EDGE_ROUTING, EdgeRouting.POLYLINE);

        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(2));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    private void switchNodes(final int upper, final int lower) {
        LNode upperNode = layer[upper];
        LNode lowerNode = layer[lower];
        layer[upper] = lowerNode;
        layer[lower] = upperNode;
    }

    private void countCrossingsInLayerBetweenNodes(final int layerIndex, final int upperNodeIndex,
            final int lowerNodeIndex) {
        setLayerIfNotSet(layerIndex);
        counter = new NorthSouthEdgeNeighbouringNodeCrossingsCounter(layer);
        counter.countCrossings(layer[upperNodeIndex], layer[lowerNodeIndex]);

    }

    private void setLayerIfNotSet(final int layerIndex) {
        if (layer == null) {
            layer = getCurrentOrder()[layerIndex];
        }
    }
}
