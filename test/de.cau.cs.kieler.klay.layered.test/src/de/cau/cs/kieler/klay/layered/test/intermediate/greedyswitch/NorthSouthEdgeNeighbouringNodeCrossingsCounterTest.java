/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2015 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
package de.cau.cs.kieler.klay.layered.test.intermediate.greedyswitch;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import org.junit.Before;
import org.junit.Test;

import de.cau.cs.kieler.kiml.options.LayoutOptions;
import de.cau.cs.kieler.kiml.options.PortConstraints;
import de.cau.cs.kieler.klay.layered.graph.LNode;
import de.cau.cs.kieler.klay.layered.intermediate.greedyswitch.NorthSouthEdgeNeighbouringNodeCrossingsCounter;

/**
 * Tests counting crosses generated by the ordering of north south ports.
 * 
 * @author alan
 *
 */
public class NorthSouthEdgeNeighbouringNodeCrossingsCounterTest {
    private NorthSouthEdgeTestGraphCreator creator;
    private NorthSouthEdgeNeighbouringNodeCrossingsCounter counter;
    private LNode[] layer;

    // CHECKSTYLEOFF javadoc
    // CHECKSTYLEOFF MagicNumber
    @Before
    public void setUp() {
        creator = new NorthSouthEdgeTestGraphCreator();
    }

    @Test
    public void noNorthSouthNode() {
        creator.getCrossFormedGraph();
        countCrossingsInLayerBetweenNodes(0, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void southernNorthSouthNodeCrossing() {
        creator.getNorthSouthDownwardCrossingGraph();
        countCrossingsInLayerBetweenNodes(0, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void northernNorthSouthNodeCrossings() {
        creator.getNorthSouthUpwardCrossingGraph();

        countCrossingsInLayerBetweenNodes(0, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void oneNodeIsLongEdgeDummy() {
        creator.getSouthernNorthSouthDummyEdgeCrossingGraph();
        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        switchNodes(1, 2);

        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void oneNodeIsLongEdgeDummyNorthern() {
        creator.getNorthernNorthSouthDummyEdgeCrossingGraph();
        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        switchNodes(0, 1);

        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void noFixedOrderConstraint() {
        creator.getNorthSouthDownwardCrossingGraph();
        creator.getCurrentOrder()[0][0].setProperty(LayoutOptions.PORT_CONSTRAINTS,
                PortConstraints.FIXED_SIDE);
        countCrossingsInLayerBetweenNodes(0, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void withNormalNode() {
        creator.getNorthSouthDownwardCrossingGraph();
        countCrossingsInLayerBetweenNodes(0, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void northSouthEdgesComeFromBothSidesDontCross() {
        creator.getSouthernNorthSouthGraphEdgesFromEastAndWestNoCrossings();
        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        creator.getNorthernNorthSouthGraphEdgesFromEastAndWestNoCrossings();
        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void southernNorthSouthEdgesBothToEast() {
        creator.getSouthernNorthSouthEdgesBothToEast();
        countCrossingsInLayerBetweenNodes(0, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void crossingsWithNorthSouthPortsBelongingToDifferentNodesShouldNotBeCounted() {
        creator.getGraphWhereLayoutUnitPreventsSwitch();
        countCrossingsInLayerBetweenNodes(0, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void northSouthEdgesComeFromBothSidesDoCross() {
        creator.getNorthSouthEdgesFromEastAndWestAndCross();
        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(1));

    }

    @Test
    public void switchNodesAndRecount() {
        creator.getNorthSouthUpwardCrossingGraph();
        countCrossingsInLayerBetweenNodes(0, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
        switchAndRecount(0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void southPortOndNormalNodeBelowLongEdgeDummy() {
        creator.getSouthPortOnNormalNodeBelowLongEdgeDummy();

        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
        switchAndRecount(0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void northPortOndNormalNodeAboveLongEdgeDummy() {
        creator.getNorthPortOndNormalNodeAboveLongEdgeDummy();

        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
        switchAndRecount(1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    private void switchAndRecount(final int upperNodeIndex, final int lowerNodeIndex) {
        switchNodes(upperNodeIndex, lowerNodeIndex);
        counter.countCrossings(layer[upperNodeIndex], layer[lowerNodeIndex]);
    }

    @Test
    public void southernTwoWesternEdges() {
        creator.getNorthSouthSouthernTwoWesternEdges();
        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
        switchAndRecount(1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void southernWesternPortToEastAndEasternPortToWest() {
        creator.getNorthSouthSouthernWesternPortToEastAndEasternPortToWest();
        countCrossingsInLayerBetweenNodes(1, 1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(1));
        switchAndRecount(1, 2);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void northernBothEdgesWestern() {
        creator.getNorthSouthNorthernWesternEdges();
        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(1));
        switchAndRecount(0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void northernEasternPortToWestWesternPortToEast() {
        creator.getNorthSouthNorthernEasternPortToWestWesternPortToEast();
        countCrossingsInLayerBetweenNodes(1, 0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(1));
        switchAndRecount(0, 1);
        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(1));
    }

    @Test
    public void normalNodesNorthSouthEdgesHaveCrossingsToLongEdgeDummy() {
        creator.getNorthernNorthSouthDummyEdgeCrossingGraph();

        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        countCrossingsInLayerBetweenNodes(1, 1, 2);

        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        creator.getSouthernNorthSouthDummyEdgeCrossingGraph();

        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));

        countCrossingsInLayerBetweenNodes(1, 1, 2);

        assertThat(counter.getUpperLowerCrossings(), is(1));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void normalNodesNorthSouthEdgesHaveCrossingsToLongEdgeDummyOnBothSides() {
        creator.getMultipleNorthSouthAndLongEdgeDummiesOnBothSides();
        countCrossingsInLayerBetweenNodes(1, 2, 3);

        assertThat(counter.getUpperLowerCrossings(), is(2));
        assertThat(counter.getLowerUpperCrossings(), is(2));
    }

    @Test
    public void ignoresUnconnectedPortsForNormalNodeAndLongEdgeDummies() {
        creator.getLongEdgeDummyAndNormalNodeWithUnusedPortsOnSouthernSide();
        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(0));

        creator.getLongEdgeDummyAndNormalNodeWithUnusedPortsOnNorthernSide();
        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(0));
    }

    @Test
    public void oneEdgeWestOneEdgeEastDontCross() {
        creator.getNorthernNorthSouthGraphEdgesFromEastAndWestNoCrossings();
        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    @Test
    public void oneEdgeEastOneEdgeWestDontCross() {
        creator.getNorthernNorthSouthGraphEdgesFromEastAndWestNoCrossingsUpperEdgeEast();

        countCrossingsInLayerBetweenNodes(1, 0, 1);

        assertThat(counter.getUpperLowerCrossings(), is(0));
        assertThat(counter.getLowerUpperCrossings(), is(0));
    }

    private void switchNodes(final int upper, final int lower) {
        LNode upperNode = layer[upper];
        LNode lowerNode = layer[lower];
        layer[upper] = lowerNode;
        layer[lower] = upperNode;
    }

    private void countCrossingsInLayerBetweenNodes(final int layerIndex, final int upperNodeIndex,
            final int lowerNodeIndex) {
        setLayerIfNotSet(layerIndex);
        counter = new NorthSouthEdgeNeighbouringNodeCrossingsCounter(layer);
        counter.countCrossings(layer[upperNodeIndex], layer[lowerNodeIndex]);

    }

    private void setLayerIfNotSet(final int layerIndex) {
        if (layer == null) {
            layer = creator.getCurrentOrder()[layerIndex];
        }
    }
}
