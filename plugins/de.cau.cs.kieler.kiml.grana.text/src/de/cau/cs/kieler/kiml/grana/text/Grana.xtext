grammar de.cau.cs.kieler.kiml.grana.text.Grana 
    //with org.eclipse.xtext.common.Terminals
    with org.eclipse.elk.graph.text.ElkGraph
hidden(WS, ML_COMMENT, SL_COMMENT)

generate grana "http://www.cau.de/cs/kieler/kiml/grana/text/Grana"

//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://elk.eclipse.org/KLayoutData"
//import "http://elk.eclipse.org/KGraph"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/elk/ElkGraph"

Grana:
    ('globalResources' (globalResources+=GlobalResourceRef)*)?
    ('globalOutputs' (gloobalOutputs+=GlobalOutputRef)*)?
    
    ('execute' (parallel?='parallel')?
              (executeAll ?= 'all' | (execute+=[Job | ID])+))
    
    (jobs+=Job)+
;

Job:
    RegularJob | RangeJob | CompareJob
;

RegularJob:
    'job' (name=ID)
    
    (layoutBeforeAnalysis ?= 'layoutBeforeAnalysis')?
    
    (measureExecutionTime ?= 'measureExecutionTime')?
    
    'resources'
        (resources+=Resource)+
    
    'layoutoptions'
        (layoutOptions+=LayoutConfig)+
        
    'analyses'
        (analyses+=Analysis)+
        
    'output'
        outputType=OutputType? output=Output
;

CompareJob:
    'comparejob' name=ID
    
    'resources' (resources+=Resource)+
    
    'layoutoptions'
        (layoutOptions+=LayoutConfig)
        (layoutOptions+=LayoutConfig)
    
    'analyses'
        (analyses+=Analysis)+
        
    'output'
        outputType=OutputType? output=Output
;

RangeJob:
    'rangejob' name=ID
    
    (measureExecutionTime ?= 'measureExecutionTime')?
    
    'resources' (resources+=Resource)+
    
    'layoutoptions'
        (layoutOptions+=LayoutConfig)+
    
    'analyses'
        (analyses+=Analysis)+
    
    'rangeoption'
        rangeOption=QualifiedId
        rangeValues=Range
            
    (('rangeanalysis'
        rangeAnalysis=Analysis
        ('component' rangeAnalysisComponent=SIGNED_INT)?)
     |
     'rangeanalyses'
        (rangeAnalyses+=Analysis)+)
    
    'output'
        outputType=OutputType? output=Output
;

Range:
    FloatRange | IntRange
;

FloatRange:
    'floatvalues' values+=FLOAT (',' values+=FLOAT)*
;

IntRange:
    IntRangeRange | IntRangeValues
;

IntRangeValues:
    'intvalues' values+=SIGNED_INT (',' values+=SIGNED_INT)*
;

IntRangeRange:
    'intrange' start=SIGNED_INT 'to' end=SIGNED_INT   
;
/*
 * ---- Resources ---- 
 */
Resource:
    ResourceReference | LocalResource
;

ResourceReference:
    'ref' (resourceRefs+=[GlobalResourceRef | ID])+
;

GlobalResourceRef:
    name=ID (resources+=LocalResource)
;

LocalResource:
    path=STRING ('filter' filter=STRING)
;

/*
 * ---- Output ---- 
 */
Output:
    OutputReference | LocalOutput
;

GlobalOutputRef:
    name=ID output=LocalOutput
;

OutputReference: 
    'ref' outputRef=[GlobalOutputRef | ID]
;

LocalOutput:
    path=STRING
;

enum OutputType:
    csv | json // first literal is default
;

Analysis:
    name=QualifiedId
;

LayoutConfig returns ElkNode:
    identifier=ID '{'
        properties+=Property*
    '}'
;
