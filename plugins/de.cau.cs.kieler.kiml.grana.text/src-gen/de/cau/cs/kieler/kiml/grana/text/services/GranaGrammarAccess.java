/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kiml.grana.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class GranaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GranaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.Grana");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cGlobalResourcesKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cGlobalResourcesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cGlobalResourcesGlobalResourceRefParserRuleCall_0_1_0 = (RuleCall)cGlobalResourcesAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGlobalOutputsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGloobalOutputsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGloobalOutputsGlobalOutputRefParserRuleCall_1_1_0 = (RuleCall)cGloobalOutputsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExecuteKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParallelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cParallelParallelKeyword_2_1_0 = (Keyword)cParallelAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Assignment cExecuteAllAssignment_2_2_0 = (Assignment)cAlternatives_2_2.eContents().get(0);
		private final Keyword cExecuteAllAllKeyword_2_2_0_0 = (Keyword)cExecuteAllAssignment_2_2_0.eContents().get(0);
		private final Assignment cExecuteAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final CrossReference cExecuteJobCrossReference_2_2_1_0 = (CrossReference)cExecuteAssignment_2_2_1.eContents().get(0);
		private final RuleCall cExecuteJobIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cExecuteJobCrossReference_2_2_1_0.eContents().get(1);
		private final Assignment cJobsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJobsJobParserRuleCall_3_0 = (RuleCall)cJobsAssignment_3.eContents().get(0);
		
		//Grana:
		//	('globalResources' globalResources+=GlobalResourceRef*)? ('globalOutputs' gloobalOutputs+=GlobalOutputRef*)?
		//	('execute' parallel?='parallel'? (executeAll?='all' | execute+=[Job]+)) jobs+=Job+;
		@Override public ParserRule getRule() { return rule; }

		//('globalResources' globalResources+=GlobalResourceRef*)? ('globalOutputs' gloobalOutputs+=GlobalOutputRef*)? ('execute'
		//parallel?='parallel'? (executeAll?='all' | execute+=[Job]+)) jobs+=Job+
		public Group getGroup() { return cGroup; }

		//('globalResources' globalResources+=GlobalResourceRef*)?
		public Group getGroup_0() { return cGroup_0; }

		//'globalResources'
		public Keyword getGlobalResourcesKeyword_0_0() { return cGlobalResourcesKeyword_0_0; }

		//globalResources+=GlobalResourceRef*
		public Assignment getGlobalResourcesAssignment_0_1() { return cGlobalResourcesAssignment_0_1; }

		//GlobalResourceRef
		public RuleCall getGlobalResourcesGlobalResourceRefParserRuleCall_0_1_0() { return cGlobalResourcesGlobalResourceRefParserRuleCall_0_1_0; }

		//('globalOutputs' gloobalOutputs+=GlobalOutputRef*)?
		public Group getGroup_1() { return cGroup_1; }

		//'globalOutputs'
		public Keyword getGlobalOutputsKeyword_1_0() { return cGlobalOutputsKeyword_1_0; }

		//gloobalOutputs+=GlobalOutputRef*
		public Assignment getGloobalOutputsAssignment_1_1() { return cGloobalOutputsAssignment_1_1; }

		//GlobalOutputRef
		public RuleCall getGloobalOutputsGlobalOutputRefParserRuleCall_1_1_0() { return cGloobalOutputsGlobalOutputRefParserRuleCall_1_1_0; }

		//('execute' parallel?='parallel'? (executeAll?='all' | execute+=[Job]+))
		public Group getGroup_2() { return cGroup_2; }

		//'execute'
		public Keyword getExecuteKeyword_2_0() { return cExecuteKeyword_2_0; }

		//parallel?='parallel'?
		public Assignment getParallelAssignment_2_1() { return cParallelAssignment_2_1; }

		//'parallel'
		public Keyword getParallelParallelKeyword_2_1_0() { return cParallelParallelKeyword_2_1_0; }

		//(executeAll?='all' | execute+=[Job]+)
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//executeAll?='all'
		public Assignment getExecuteAllAssignment_2_2_0() { return cExecuteAllAssignment_2_2_0; }

		//'all'
		public Keyword getExecuteAllAllKeyword_2_2_0_0() { return cExecuteAllAllKeyword_2_2_0_0; }

		//execute+=[Job]+
		public Assignment getExecuteAssignment_2_2_1() { return cExecuteAssignment_2_2_1; }

		//[Job]
		public CrossReference getExecuteJobCrossReference_2_2_1_0() { return cExecuteJobCrossReference_2_2_1_0; }

		//ID
		public RuleCall getExecuteJobIDTerminalRuleCall_2_2_1_0_1() { return cExecuteJobIDTerminalRuleCall_2_2_1_0_1; }

		//jobs+=Job+
		public Assignment getJobsAssignment_3() { return cJobsAssignment_3; }

		//Job
		public RuleCall getJobsJobParserRuleCall_3_0() { return cJobsJobParserRuleCall_3_0; }
	}

	public class JobElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.Job");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularJobParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRangeJobParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompareJobParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Job:
		//	RegularJob | RangeJob | CompareJob;
		@Override public ParserRule getRule() { return rule; }

		//RegularJob | RangeJob | CompareJob
		public Alternatives getAlternatives() { return cAlternatives; }

		//RegularJob
		public RuleCall getRegularJobParserRuleCall_0() { return cRegularJobParserRuleCall_0; }

		//RangeJob
		public RuleCall getRangeJobParserRuleCall_1() { return cRangeJobParserRuleCall_1; }

		//CompareJob
		public RuleCall getCompareJobParserRuleCall_2() { return cCompareJobParserRuleCall_2; }
	}

	public class RegularJobElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.RegularJob");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJobKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLayoutBeforeAnalysisAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cLayoutBeforeAnalysisLayoutBeforeAnalysisKeyword_2_0 = (Keyword)cLayoutBeforeAnalysisAssignment_2.eContents().get(0);
		private final Assignment cMeasureExecutionTimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMeasureExecutionTimeMeasureExecutionTimeKeyword_3_0 = (Keyword)cMeasureExecutionTimeAssignment_3.eContents().get(0);
		private final Keyword cResourcesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cResourcesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResourcesResourceParserRuleCall_5_0 = (RuleCall)cResourcesAssignment_5.eContents().get(0);
		private final Keyword cLayoutoptionsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLayoutOptionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLayoutOptionsKIdentifierParserRuleCall_7_0 = (RuleCall)cLayoutOptionsAssignment_7.eContents().get(0);
		private final Keyword cAnalysesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAnalysesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnalysesAnalysisParserRuleCall_9_0 = (RuleCall)cAnalysesAssignment_9.eContents().get(0);
		private final Keyword cOutputKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cOutputTypeAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOutputTypeOutputTypeEnumRuleCall_11_0 = (RuleCall)cOutputTypeAssignment_11.eContents().get(0);
		private final Assignment cOutputAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cOutputOutputParserRuleCall_12_0 = (RuleCall)cOutputAssignment_12.eContents().get(0);
		
		//RegularJob:
		//	'job' name=ID layoutBeforeAnalysis?='layoutBeforeAnalysis'?
		//	measureExecutionTime?='measureExecutionTime'?
		//	'resources'
		//	resources+=Resource+
		//	'layoutoptions'
		//	layoutOptions+=KIdentifier+
		//	'analyses'
		//	analyses+=Analysis+
		//	'output'
		//	outputType=OutputType? output=Output;
		@Override public ParserRule getRule() { return rule; }

		//'job' name=ID layoutBeforeAnalysis?='layoutBeforeAnalysis'? measureExecutionTime?='measureExecutionTime'? 'resources'
		//resources+=Resource+ 'layoutoptions' layoutOptions+=KIdentifier+ 'analyses' analyses+=Analysis+ 'output'
		//outputType=OutputType? output=Output
		public Group getGroup() { return cGroup; }

		//'job'
		public Keyword getJobKeyword_0() { return cJobKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//layoutBeforeAnalysis?='layoutBeforeAnalysis'?
		public Assignment getLayoutBeforeAnalysisAssignment_2() { return cLayoutBeforeAnalysisAssignment_2; }

		//'layoutBeforeAnalysis'
		public Keyword getLayoutBeforeAnalysisLayoutBeforeAnalysisKeyword_2_0() { return cLayoutBeforeAnalysisLayoutBeforeAnalysisKeyword_2_0; }

		//measureExecutionTime?='measureExecutionTime'?
		public Assignment getMeasureExecutionTimeAssignment_3() { return cMeasureExecutionTimeAssignment_3; }

		//'measureExecutionTime'
		public Keyword getMeasureExecutionTimeMeasureExecutionTimeKeyword_3_0() { return cMeasureExecutionTimeMeasureExecutionTimeKeyword_3_0; }

		//'resources'
		public Keyword getResourcesKeyword_4() { return cResourcesKeyword_4; }

		//resources+=Resource+
		public Assignment getResourcesAssignment_5() { return cResourcesAssignment_5; }

		//Resource
		public RuleCall getResourcesResourceParserRuleCall_5_0() { return cResourcesResourceParserRuleCall_5_0; }

		//'layoutoptions'
		public Keyword getLayoutoptionsKeyword_6() { return cLayoutoptionsKeyword_6; }

		//layoutOptions+=KIdentifier+
		public Assignment getLayoutOptionsAssignment_7() { return cLayoutOptionsAssignment_7; }

		//KIdentifier
		public RuleCall getLayoutOptionsKIdentifierParserRuleCall_7_0() { return cLayoutOptionsKIdentifierParserRuleCall_7_0; }

		//'analyses'
		public Keyword getAnalysesKeyword_8() { return cAnalysesKeyword_8; }

		//analyses+=Analysis+
		public Assignment getAnalysesAssignment_9() { return cAnalysesAssignment_9; }

		//Analysis
		public RuleCall getAnalysesAnalysisParserRuleCall_9_0() { return cAnalysesAnalysisParserRuleCall_9_0; }

		//'output'
		public Keyword getOutputKeyword_10() { return cOutputKeyword_10; }

		//outputType=OutputType?
		public Assignment getOutputTypeAssignment_11() { return cOutputTypeAssignment_11; }

		//OutputType
		public RuleCall getOutputTypeOutputTypeEnumRuleCall_11_0() { return cOutputTypeOutputTypeEnumRuleCall_11_0; }

		//output=Output
		public Assignment getOutputAssignment_12() { return cOutputAssignment_12; }

		//Output
		public RuleCall getOutputOutputParserRuleCall_12_0() { return cOutputOutputParserRuleCall_12_0; }
	}

	public class CompareJobElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.CompareJob");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComparejobKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cResourcesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResourcesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResourcesResourceParserRuleCall_3_0 = (RuleCall)cResourcesAssignment_3.eContents().get(0);
		private final Keyword cLayoutoptionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLayoutOptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLayoutOptionsKIdentifierParserRuleCall_5_0 = (RuleCall)cLayoutOptionsAssignment_5.eContents().get(0);
		private final Assignment cLayoutOptionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLayoutOptionsKIdentifierParserRuleCall_6_0 = (RuleCall)cLayoutOptionsAssignment_6.eContents().get(0);
		private final Keyword cAnalysesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAnalysesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAnalysesAnalysisParserRuleCall_8_0 = (RuleCall)cAnalysesAssignment_8.eContents().get(0);
		private final Keyword cOutputKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cOutputTypeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOutputTypeOutputTypeEnumRuleCall_10_0 = (RuleCall)cOutputTypeAssignment_10.eContents().get(0);
		private final Assignment cOutputAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOutputOutputParserRuleCall_11_0 = (RuleCall)cOutputAssignment_11.eContents().get(0);
		
		//CompareJob:
		//	'comparejob' name=ID
		//	'resources' resources+=Resource+
		//	'layoutoptions'
		//	layoutOptions+=KIdentifier layoutOptions+=KIdentifier 'analyses'
		//	analyses+=Analysis+
		//	'output'
		//	outputType=OutputType? output=Output;
		@Override public ParserRule getRule() { return rule; }

		//'comparejob' name=ID 'resources' resources+=Resource+ 'layoutoptions' layoutOptions+=KIdentifier
		//layoutOptions+=KIdentifier 'analyses' analyses+=Analysis+ 'output' outputType=OutputType? output=Output
		public Group getGroup() { return cGroup; }

		//'comparejob'
		public Keyword getComparejobKeyword_0() { return cComparejobKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'resources'
		public Keyword getResourcesKeyword_2() { return cResourcesKeyword_2; }

		//resources+=Resource+
		public Assignment getResourcesAssignment_3() { return cResourcesAssignment_3; }

		//Resource
		public RuleCall getResourcesResourceParserRuleCall_3_0() { return cResourcesResourceParserRuleCall_3_0; }

		//'layoutoptions'
		public Keyword getLayoutoptionsKeyword_4() { return cLayoutoptionsKeyword_4; }

		//layoutOptions+=KIdentifier
		public Assignment getLayoutOptionsAssignment_5() { return cLayoutOptionsAssignment_5; }

		//KIdentifier
		public RuleCall getLayoutOptionsKIdentifierParserRuleCall_5_0() { return cLayoutOptionsKIdentifierParserRuleCall_5_0; }

		//layoutOptions+=KIdentifier
		public Assignment getLayoutOptionsAssignment_6() { return cLayoutOptionsAssignment_6; }

		//KIdentifier
		public RuleCall getLayoutOptionsKIdentifierParserRuleCall_6_0() { return cLayoutOptionsKIdentifierParserRuleCall_6_0; }

		//'analyses'
		public Keyword getAnalysesKeyword_7() { return cAnalysesKeyword_7; }

		//analyses+=Analysis+
		public Assignment getAnalysesAssignment_8() { return cAnalysesAssignment_8; }

		//Analysis
		public RuleCall getAnalysesAnalysisParserRuleCall_8_0() { return cAnalysesAnalysisParserRuleCall_8_0; }

		//'output'
		public Keyword getOutputKeyword_9() { return cOutputKeyword_9; }

		//outputType=OutputType?
		public Assignment getOutputTypeAssignment_10() { return cOutputTypeAssignment_10; }

		//OutputType
		public RuleCall getOutputTypeOutputTypeEnumRuleCall_10_0() { return cOutputTypeOutputTypeEnumRuleCall_10_0; }

		//output=Output
		public Assignment getOutputAssignment_11() { return cOutputAssignment_11; }

		//Output
		public RuleCall getOutputOutputParserRuleCall_11_0() { return cOutputOutputParserRuleCall_11_0; }
	}

	public class RangeJobElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.RangeJob");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangejobKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMeasureExecutionTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMeasureExecutionTimeMeasureExecutionTimeKeyword_2_0 = (Keyword)cMeasureExecutionTimeAssignment_2.eContents().get(0);
		private final Keyword cResourcesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cResourcesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResourcesResourceParserRuleCall_4_0 = (RuleCall)cResourcesAssignment_4.eContents().get(0);
		private final Keyword cLayoutoptionsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLayoutOptionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLayoutOptionsKIdentifierParserRuleCall_6_0 = (RuleCall)cLayoutOptionsAssignment_6.eContents().get(0);
		private final Keyword cAnalysesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAnalysesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAnalysesAnalysisParserRuleCall_8_0 = (RuleCall)cAnalysesAssignment_8.eContents().get(0);
		private final Keyword cRangeoptionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cRangeOptionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cRangeOptionQualifiedIDParserRuleCall_10_0 = (RuleCall)cRangeOptionAssignment_10.eContents().get(0);
		private final Assignment cRangeValuesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cRangeValuesRangeParserRuleCall_11_0 = (RuleCall)cRangeValuesAssignment_11.eContents().get(0);
		private final Alternatives cAlternatives_12 = (Alternatives)cGroup.eContents().get(12);
		private final Group cGroup_12_0 = (Group)cAlternatives_12.eContents().get(0);
		private final Keyword cRangeanalysisKeyword_12_0_0 = (Keyword)cGroup_12_0.eContents().get(0);
		private final Assignment cRangeAnalysisAssignment_12_0_1 = (Assignment)cGroup_12_0.eContents().get(1);
		private final RuleCall cRangeAnalysisAnalysisParserRuleCall_12_0_1_0 = (RuleCall)cRangeAnalysisAssignment_12_0_1.eContents().get(0);
		private final Group cGroup_12_0_2 = (Group)cGroup_12_0.eContents().get(2);
		private final Keyword cComponentKeyword_12_0_2_0 = (Keyword)cGroup_12_0_2.eContents().get(0);
		private final Assignment cRangeAnalysisComponentAssignment_12_0_2_1 = (Assignment)cGroup_12_0_2.eContents().get(1);
		private final RuleCall cRangeAnalysisComponentNATURALTerminalRuleCall_12_0_2_1_0 = (RuleCall)cRangeAnalysisComponentAssignment_12_0_2_1.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cAlternatives_12.eContents().get(1);
		private final Keyword cRangeanalysesKeyword_12_1_0 = (Keyword)cGroup_12_1.eContents().get(0);
		private final Assignment cRangeAnalysesAssignment_12_1_1 = (Assignment)cGroup_12_1.eContents().get(1);
		private final RuleCall cRangeAnalysesAnalysisParserRuleCall_12_1_1_0 = (RuleCall)cRangeAnalysesAssignment_12_1_1.eContents().get(0);
		private final Keyword cOutputKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cOutputTypeAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cOutputTypeOutputTypeEnumRuleCall_14_0 = (RuleCall)cOutputTypeAssignment_14.eContents().get(0);
		private final Assignment cOutputAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cOutputOutputParserRuleCall_15_0 = (RuleCall)cOutputAssignment_15.eContents().get(0);
		
		//RangeJob:
		//	'rangejob' name=ID
		//	measureExecutionTime?='measureExecutionTime'?
		//	'resources' resources+=Resource+
		//	'layoutoptions'
		//	layoutOptions+=KIdentifier+
		//	'analyses'
		//	analyses+=Analysis+
		//	'rangeoption'
		//	rangeOption=QualifiedID
		//	rangeValues=Range ('rangeanalysis'
		//	rangeAnalysis=Analysis ('component' rangeAnalysisComponent=NATURAL)? |
		//	'rangeanalyses'
		//	rangeAnalyses+=Analysis+)
		//	'output'
		//	outputType=OutputType? output=Output;
		@Override public ParserRule getRule() { return rule; }

		//'rangejob' name=ID measureExecutionTime?='measureExecutionTime'? 'resources' resources+=Resource+ 'layoutoptions'
		//layoutOptions+=KIdentifier+ 'analyses' analyses+=Analysis+ 'rangeoption' rangeOption=QualifiedID rangeValues=Range
		//('rangeanalysis' rangeAnalysis=Analysis ('component' rangeAnalysisComponent=NATURAL)? | 'rangeanalyses'
		//rangeAnalyses+=Analysis+) 'output' outputType=OutputType? output=Output
		public Group getGroup() { return cGroup; }

		//'rangejob'
		public Keyword getRangejobKeyword_0() { return cRangejobKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//measureExecutionTime?='measureExecutionTime'?
		public Assignment getMeasureExecutionTimeAssignment_2() { return cMeasureExecutionTimeAssignment_2; }

		//'measureExecutionTime'
		public Keyword getMeasureExecutionTimeMeasureExecutionTimeKeyword_2_0() { return cMeasureExecutionTimeMeasureExecutionTimeKeyword_2_0; }

		//'resources'
		public Keyword getResourcesKeyword_3() { return cResourcesKeyword_3; }

		//resources+=Resource+
		public Assignment getResourcesAssignment_4() { return cResourcesAssignment_4; }

		//Resource
		public RuleCall getResourcesResourceParserRuleCall_4_0() { return cResourcesResourceParserRuleCall_4_0; }

		//'layoutoptions'
		public Keyword getLayoutoptionsKeyword_5() { return cLayoutoptionsKeyword_5; }

		//layoutOptions+=KIdentifier+
		public Assignment getLayoutOptionsAssignment_6() { return cLayoutOptionsAssignment_6; }

		//KIdentifier
		public RuleCall getLayoutOptionsKIdentifierParserRuleCall_6_0() { return cLayoutOptionsKIdentifierParserRuleCall_6_0; }

		//'analyses'
		public Keyword getAnalysesKeyword_7() { return cAnalysesKeyword_7; }

		//analyses+=Analysis+
		public Assignment getAnalysesAssignment_8() { return cAnalysesAssignment_8; }

		//Analysis
		public RuleCall getAnalysesAnalysisParserRuleCall_8_0() { return cAnalysesAnalysisParserRuleCall_8_0; }

		//'rangeoption'
		public Keyword getRangeoptionKeyword_9() { return cRangeoptionKeyword_9; }

		//rangeOption=QualifiedID
		public Assignment getRangeOptionAssignment_10() { return cRangeOptionAssignment_10; }

		//QualifiedID
		public RuleCall getRangeOptionQualifiedIDParserRuleCall_10_0() { return cRangeOptionQualifiedIDParserRuleCall_10_0; }

		//rangeValues=Range
		public Assignment getRangeValuesAssignment_11() { return cRangeValuesAssignment_11; }

		//Range
		public RuleCall getRangeValuesRangeParserRuleCall_11_0() { return cRangeValuesRangeParserRuleCall_11_0; }

		//('rangeanalysis' rangeAnalysis=Analysis ('component' rangeAnalysisComponent=NATURAL)? | 'rangeanalyses'
		//rangeAnalyses+=Analysis+)
		public Alternatives getAlternatives_12() { return cAlternatives_12; }

		//'rangeanalysis' rangeAnalysis=Analysis ('component' rangeAnalysisComponent=NATURAL)?
		public Group getGroup_12_0() { return cGroup_12_0; }

		//'rangeanalysis'
		public Keyword getRangeanalysisKeyword_12_0_0() { return cRangeanalysisKeyword_12_0_0; }

		//rangeAnalysis=Analysis
		public Assignment getRangeAnalysisAssignment_12_0_1() { return cRangeAnalysisAssignment_12_0_1; }

		//Analysis
		public RuleCall getRangeAnalysisAnalysisParserRuleCall_12_0_1_0() { return cRangeAnalysisAnalysisParserRuleCall_12_0_1_0; }

		//('component' rangeAnalysisComponent=NATURAL)?
		public Group getGroup_12_0_2() { return cGroup_12_0_2; }

		//'component'
		public Keyword getComponentKeyword_12_0_2_0() { return cComponentKeyword_12_0_2_0; }

		//rangeAnalysisComponent=NATURAL
		public Assignment getRangeAnalysisComponentAssignment_12_0_2_1() { return cRangeAnalysisComponentAssignment_12_0_2_1; }

		//NATURAL
		public RuleCall getRangeAnalysisComponentNATURALTerminalRuleCall_12_0_2_1_0() { return cRangeAnalysisComponentNATURALTerminalRuleCall_12_0_2_1_0; }

		//'rangeanalyses' rangeAnalyses+=Analysis+
		public Group getGroup_12_1() { return cGroup_12_1; }

		//'rangeanalyses'
		public Keyword getRangeanalysesKeyword_12_1_0() { return cRangeanalysesKeyword_12_1_0; }

		//rangeAnalyses+=Analysis+
		public Assignment getRangeAnalysesAssignment_12_1_1() { return cRangeAnalysesAssignment_12_1_1; }

		//Analysis
		public RuleCall getRangeAnalysesAnalysisParserRuleCall_12_1_1_0() { return cRangeAnalysesAnalysisParserRuleCall_12_1_1_0; }

		//'output'
		public Keyword getOutputKeyword_13() { return cOutputKeyword_13; }

		//outputType=OutputType?
		public Assignment getOutputTypeAssignment_14() { return cOutputTypeAssignment_14; }

		//OutputType
		public RuleCall getOutputTypeOutputTypeEnumRuleCall_14_0() { return cOutputTypeOutputTypeEnumRuleCall_14_0; }

		//output=Output
		public Assignment getOutputAssignment_15() { return cOutputAssignment_15; }

		//Output
		public RuleCall getOutputOutputParserRuleCall_15_0() { return cOutputOutputParserRuleCall_15_0; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.Range");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Range:
		//	FloatRange | IntRange;
		@Override public ParserRule getRule() { return rule; }

		//FloatRange | IntRange
		public Alternatives getAlternatives() { return cAlternatives; }

		//FloatRange
		public RuleCall getFloatRangeParserRuleCall_0() { return cFloatRangeParserRuleCall_0; }

		//IntRange
		public RuleCall getIntRangeParserRuleCall_1() { return cIntRangeParserRuleCall_1; }
	}

	public class FloatRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.FloatRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFloatvaluesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesFloatParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesFloatParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		
		//FloatRange:
		//	'floatvalues' values+=Float (',' values+=Float)*;
		@Override public ParserRule getRule() { return rule; }

		//'floatvalues' values+=Float (',' values+=Float)*
		public Group getGroup() { return cGroup; }

		//'floatvalues'
		public Keyword getFloatvaluesKeyword_0() { return cFloatvaluesKeyword_0; }

		//values+=Float
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//Float
		public RuleCall getValuesFloatParserRuleCall_1_0() { return cValuesFloatParserRuleCall_1_0; }

		//(',' values+=Float)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=Float
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//Float
		public RuleCall getValuesFloatParserRuleCall_2_1_0() { return cValuesFloatParserRuleCall_2_1_0; }
	}

	public class IntRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.IntRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntRangeRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntRangeValuesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntRange:
		//	IntRangeRange | IntRangeValues;
		@Override public ParserRule getRule() { return rule; }

		//IntRangeRange | IntRangeValues
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntRangeRange
		public RuleCall getIntRangeRangeParserRuleCall_0() { return cIntRangeRangeParserRuleCall_0; }

		//IntRangeValues
		public RuleCall getIntRangeValuesParserRuleCall_1() { return cIntRangeValuesParserRuleCall_1; }
	}

	public class IntRangeValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.IntRangeValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntvaluesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesNATURALTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesNATURALTerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		
		//IntRangeValues:
		//	'intvalues' values+=NATURAL (',' values+=NATURAL)*;
		@Override public ParserRule getRule() { return rule; }

		//'intvalues' values+=NATURAL (',' values+=NATURAL)*
		public Group getGroup() { return cGroup; }

		//'intvalues'
		public Keyword getIntvaluesKeyword_0() { return cIntvaluesKeyword_0; }

		//values+=NATURAL
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//NATURAL
		public RuleCall getValuesNATURALTerminalRuleCall_1_0() { return cValuesNATURALTerminalRuleCall_1_0; }

		//(',' values+=NATURAL)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=NATURAL
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//NATURAL
		public RuleCall getValuesNATURALTerminalRuleCall_2_1_0() { return cValuesNATURALTerminalRuleCall_2_1_0; }
	}

	public class IntRangeRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.IntRangeRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntrangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartNATURALTerminalRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndNATURALTerminalRuleCall_3_0 = (RuleCall)cEndAssignment_3.eContents().get(0);
		
		//IntRangeRange:
		//	'intrange' start=NATURAL 'to' end=NATURAL;
		@Override public ParserRule getRule() { return rule; }

		//'intrange' start=NATURAL 'to' end=NATURAL
		public Group getGroup() { return cGroup; }

		//'intrange'
		public Keyword getIntrangeKeyword_0() { return cIntrangeKeyword_0; }

		//start=NATURAL
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }

		//NATURAL
		public RuleCall getStartNATURALTerminalRuleCall_1_0() { return cStartNATURALTerminalRuleCall_1_0; }

		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//end=NATURAL
		public Assignment getEndAssignment_3() { return cEndAssignment_3; }

		//NATURAL
		public RuleCall getEndNATURALTerminalRuleCall_3_0() { return cEndNATURALTerminalRuleCall_3_0; }
	}

	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.Resource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourceReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalResourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * ---- Resources ---- 
		// * / Resource:
		//	ResourceReference | LocalResource;
		@Override public ParserRule getRule() { return rule; }

		//ResourceReference | LocalResource
		public Alternatives getAlternatives() { return cAlternatives; }

		//ResourceReference
		public RuleCall getResourceReferenceParserRuleCall_0() { return cResourceReferenceParserRuleCall_0; }

		//LocalResource
		public RuleCall getLocalResourceParserRuleCall_1() { return cLocalResourceParserRuleCall_1; }
	}

	public class ResourceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.ResourceReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceRefsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceRefsGlobalResourceRefCrossReference_1_0 = (CrossReference)cResourceRefsAssignment_1.eContents().get(0);
		private final RuleCall cResourceRefsGlobalResourceRefIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceRefsGlobalResourceRefCrossReference_1_0.eContents().get(1);
		
		//ResourceReference:
		//	'ref' resourceRefs+=[GlobalResourceRef]+;
		@Override public ParserRule getRule() { return rule; }

		//'ref' resourceRefs+=[GlobalResourceRef]+
		public Group getGroup() { return cGroup; }

		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//resourceRefs+=[GlobalResourceRef]+
		public Assignment getResourceRefsAssignment_1() { return cResourceRefsAssignment_1; }

		//[GlobalResourceRef]
		public CrossReference getResourceRefsGlobalResourceRefCrossReference_1_0() { return cResourceRefsGlobalResourceRefCrossReference_1_0; }

		//ID
		public RuleCall getResourceRefsGlobalResourceRefIDTerminalRuleCall_1_0_1() { return cResourceRefsGlobalResourceRefIDTerminalRuleCall_1_0_1; }
	}

	public class GlobalResourceRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.GlobalResourceRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResourcesLocalResourceParserRuleCall_1_0 = (RuleCall)cResourcesAssignment_1.eContents().get(0);
		
		//GlobalResourceRef:
		//	name=ID resources+=LocalResource;
		@Override public ParserRule getRule() { return rule; }

		//name=ID resources+=LocalResource
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//resources+=LocalResource
		public Assignment getResourcesAssignment_1() { return cResourcesAssignment_1; }

		//LocalResource
		public RuleCall getResourcesLocalResourceParserRuleCall_1_0() { return cResourcesLocalResourceParserRuleCall_1_0; }
	}

	public class LocalResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.LocalResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathSTRINGTerminalRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFilterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFilterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilterSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cFilterAssignment_1_1.eContents().get(0);
		
		//LocalResource:
		//	path=STRING ('filter' filter=STRING);
		@Override public ParserRule getRule() { return rule; }

		//path=STRING ('filter' filter=STRING)
		public Group getGroup() { return cGroup; }

		//path=STRING
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_0_0() { return cPathSTRINGTerminalRuleCall_0_0; }

		//('filter' filter=STRING)
		public Group getGroup_1() { return cGroup_1; }

		//'filter'
		public Keyword getFilterKeyword_1_0() { return cFilterKeyword_1_0; }

		//filter=STRING
		public Assignment getFilterAssignment_1_1() { return cFilterAssignment_1_1; }

		//STRING
		public RuleCall getFilterSTRINGTerminalRuleCall_1_1_0() { return cFilterSTRINGTerminalRuleCall_1_1_0; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.Output");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOutputReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalOutputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * ---- Output ---- 
		// * / Output:
		//	OutputReference | LocalOutput;
		@Override public ParserRule getRule() { return rule; }

		//OutputReference | LocalOutput
		public Alternatives getAlternatives() { return cAlternatives; }

		//OutputReference
		public RuleCall getOutputReferenceParserRuleCall_0() { return cOutputReferenceParserRuleCall_0; }

		//LocalOutput
		public RuleCall getLocalOutputParserRuleCall_1() { return cLocalOutputParserRuleCall_1; }
	}

	public class GlobalOutputRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.GlobalOutputRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cOutputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutputLocalOutputParserRuleCall_1_0 = (RuleCall)cOutputAssignment_1.eContents().get(0);
		
		//GlobalOutputRef:
		//	name=ID output=LocalOutput;
		@Override public ParserRule getRule() { return rule; }

		//name=ID output=LocalOutput
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//output=LocalOutput
		public Assignment getOutputAssignment_1() { return cOutputAssignment_1; }

		//LocalOutput
		public RuleCall getOutputLocalOutputParserRuleCall_1_0() { return cOutputLocalOutputParserRuleCall_1_0; }
	}

	public class OutputReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.OutputReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOutputRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOutputRefGlobalOutputRefCrossReference_1_0 = (CrossReference)cOutputRefAssignment_1.eContents().get(0);
		private final RuleCall cOutputRefGlobalOutputRefIDTerminalRuleCall_1_0_1 = (RuleCall)cOutputRefGlobalOutputRefCrossReference_1_0.eContents().get(1);
		
		//OutputReference:
		//	'ref' outputRef=[GlobalOutputRef];
		@Override public ParserRule getRule() { return rule; }

		//'ref' outputRef=[GlobalOutputRef]
		public Group getGroup() { return cGroup; }

		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//outputRef=[GlobalOutputRef]
		public Assignment getOutputRefAssignment_1() { return cOutputRefAssignment_1; }

		//[GlobalOutputRef]
		public CrossReference getOutputRefGlobalOutputRefCrossReference_1_0() { return cOutputRefGlobalOutputRefCrossReference_1_0; }

		//ID
		public RuleCall getOutputRefGlobalOutputRefIDTerminalRuleCall_1_0_1() { return cOutputRefGlobalOutputRefIDTerminalRuleCall_1_0_1; }
	}

	public class LocalOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.LocalOutput");
		private final Assignment cPathAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_0 = (RuleCall)cPathAssignment.eContents().get(0);
		
		//LocalOutput:
		//	path=STRING;
		@Override public ParserRule getRule() { return rule; }

		//path=STRING
		public Assignment getPathAssignment() { return cPathAssignment; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_0() { return cPathSTRINGTerminalRuleCall_0; }
	}

	public class AnalysisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.Analysis");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Analysis:
		//	name=QualifiedID;
		@Override public ParserRule getRule() { return rule; }

		//name=QualifiedID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedID
		public RuleCall getNameQualifiedIDParserRuleCall_0() { return cNameQualifiedIDParserRuleCall_0; }
	}

	public class KIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.KIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPersistentEntriesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPersistentEntriesPersistentEntryParserRuleCall_3_0_0 = (RuleCall)cPersistentEntriesAssignment_3_0.eContents().get(0);
		private final Assignment cPersistentEntriesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPersistentEntriesPersistentEntryParserRuleCall_3_1_0 = (RuleCall)cPersistentEntriesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//KIdentifier:
		//	{KIdentifier} id=ID
		//	'{' (persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{KIdentifier} id=ID '{' (persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)? '}'
		public Group getGroup() { return cGroup; }

		//{KIdentifier}
		public Action getKIdentifierAction_0() { return cKIdentifierAction_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)?
		public Group getGroup_3() { return cGroup_3; }

		//persistentEntries+=PersistentEntry
		public Assignment getPersistentEntriesAssignment_3_0() { return cPersistentEntriesAssignment_3_0; }

		//PersistentEntry
		public RuleCall getPersistentEntriesPersistentEntryParserRuleCall_3_0_0() { return cPersistentEntriesPersistentEntryParserRuleCall_3_0_0; }

		//persistentEntries+=PersistentEntry*
		public Assignment getPersistentEntriesAssignment_3_1() { return cPersistentEntriesAssignment_3_1; }

		//PersistentEntry
		public RuleCall getPersistentEntriesPersistentEntryParserRuleCall_3_1_0() { return cPersistentEntriesPersistentEntryParserRuleCall_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PersistentEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.PersistentEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyQualifiedIDParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePropertyValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PersistentEntry:
		//	key=QualifiedID ':' value=PropertyValue;
		@Override public ParserRule getRule() { return rule; }

		//key=QualifiedID ':' value=PropertyValue
		public Group getGroup() { return cGroup; }

		//key=QualifiedID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//QualifiedID
		public RuleCall getKeyQualifiedIDParserRuleCall_0_0() { return cKeyQualifiedIDParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=PropertyValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//PropertyValue
		public RuleCall getValuePropertyValueParserRuleCall_2_0() { return cValuePropertyValueParserRuleCall_2_0; }
	}

	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.QualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedID:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.PropertyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLEANTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQualifiedIDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PropertyValue:
		//	BOOLEAN | STRING | Float | QualifiedID;
		@Override public ParserRule getRule() { return rule; }

		//BOOLEAN | STRING | Float | QualifiedID
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_0() { return cBOOLEANTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//Float
		public RuleCall getFloatParserRuleCall_2() { return cFloatParserRuleCall_2; }

		//QualifiedID
		public RuleCall getQualifiedIDParserRuleCall_3() { return cQualifiedIDParserRuleCall_3; }
	}

	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.Float");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTFLOATTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNATURALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Float ecore::EFloat:
		//	TFLOAT | NATURAL
		@Override public ParserRule getRule() { return rule; }

		//TFLOAT | NATURAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//TFLOAT
		public RuleCall getTFLOATTerminalRuleCall_0() { return cTFLOATTerminalRuleCall_0; }

		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_1() { return cNATURALTerminalRuleCall_1; }
	}
	
	
	public class OutputTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.OutputType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCsvEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCsvCsvKeyword_0_0 = (Keyword)cCsvEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cJsonEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cJsonJsonKeyword_1_0 = (Keyword)cJsonEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OutputType:
		//	csv | json // first literal is default
		//;
		public EnumRule getRule() { return rule; }

		//csv | json
		public Alternatives getAlternatives() { return cAlternatives; }

		//csv
		public EnumLiteralDeclaration getCsvEnumLiteralDeclaration_0() { return cCsvEnumLiteralDeclaration_0; }

		//"csv"
		public Keyword getCsvCsvKeyword_0_0() { return cCsvCsvKeyword_0_0; }

		//json
		public EnumLiteralDeclaration getJsonEnumLiteralDeclaration_1() { return cJsonEnumLiteralDeclaration_1; }

		//"json"
		public Keyword getJsonJsonKeyword_1_0() { return cJsonJsonKeyword_1_0; }
	}
	
	private final GranaElements pGrana;
	private final JobElements pJob;
	private final RegularJobElements pRegularJob;
	private final CompareJobElements pCompareJob;
	private final RangeJobElements pRangeJob;
	private final RangeElements pRange;
	private final FloatRangeElements pFloatRange;
	private final IntRangeElements pIntRange;
	private final IntRangeValuesElements pIntRangeValues;
	private final IntRangeRangeElements pIntRangeRange;
	private final ResourceElements pResource;
	private final ResourceReferenceElements pResourceReference;
	private final GlobalResourceRefElements pGlobalResourceRef;
	private final LocalResourceElements pLocalResource;
	private final OutputElements pOutput;
	private final GlobalOutputRefElements pGlobalOutputRef;
	private final OutputReferenceElements pOutputReference;
	private final LocalOutputElements pLocalOutput;
	private final OutputTypeElements eOutputType;
	private final AnalysisElements pAnalysis;
	private final KIdentifierElements pKIdentifier;
	private final PersistentEntryElements pPersistentEntry;
	private final QualifiedIDElements pQualifiedID;
	private final PropertyValueElements pPropertyValue;
	private final FloatElements pFloat;
	private final TerminalRule tTFLOAT;
	private final TerminalRule tNATURAL;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tSTRING;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public GranaGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pGrana = new GranaElements();
		this.pJob = new JobElements();
		this.pRegularJob = new RegularJobElements();
		this.pCompareJob = new CompareJobElements();
		this.pRangeJob = new RangeJobElements();
		this.pRange = new RangeElements();
		this.pFloatRange = new FloatRangeElements();
		this.pIntRange = new IntRangeElements();
		this.pIntRangeValues = new IntRangeValuesElements();
		this.pIntRangeRange = new IntRangeRangeElements();
		this.pResource = new ResourceElements();
		this.pResourceReference = new ResourceReferenceElements();
		this.pGlobalResourceRef = new GlobalResourceRefElements();
		this.pLocalResource = new LocalResourceElements();
		this.pOutput = new OutputElements();
		this.pGlobalOutputRef = new GlobalOutputRefElements();
		this.pOutputReference = new OutputReferenceElements();
		this.pLocalOutput = new LocalOutputElements();
		this.eOutputType = new OutputTypeElements();
		this.pAnalysis = new AnalysisElements();
		this.pKIdentifier = new KIdentifierElements();
		this.pPersistentEntry = new PersistentEntryElements();
		this.pQualifiedID = new QualifiedIDElements();
		this.pPropertyValue = new PropertyValueElements();
		this.pFloat = new FloatElements();
		this.tTFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.TFLOAT");
		this.tNATURAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.NATURAL");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.BOOLEAN");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.STRING");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.grana.text.Grana.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.kiml.grana.text.Grana".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Grana:
	//	('globalResources' globalResources+=GlobalResourceRef*)? ('globalOutputs' gloobalOutputs+=GlobalOutputRef*)?
	//	('execute' parallel?='parallel'? (executeAll?='all' | execute+=[Job]+)) jobs+=Job+;
	public GranaElements getGranaAccess() {
		return pGrana;
	}
	
	public ParserRule getGranaRule() {
		return getGranaAccess().getRule();
	}

	//Job:
	//	RegularJob | RangeJob | CompareJob;
	public JobElements getJobAccess() {
		return pJob;
	}
	
	public ParserRule getJobRule() {
		return getJobAccess().getRule();
	}

	//RegularJob:
	//	'job' name=ID layoutBeforeAnalysis?='layoutBeforeAnalysis'?
	//	measureExecutionTime?='measureExecutionTime'?
	//	'resources'
	//	resources+=Resource+
	//	'layoutoptions'
	//	layoutOptions+=KIdentifier+
	//	'analyses'
	//	analyses+=Analysis+
	//	'output'
	//	outputType=OutputType? output=Output;
	public RegularJobElements getRegularJobAccess() {
		return pRegularJob;
	}
	
	public ParserRule getRegularJobRule() {
		return getRegularJobAccess().getRule();
	}

	//CompareJob:
	//	'comparejob' name=ID
	//	'resources' resources+=Resource+
	//	'layoutoptions'
	//	layoutOptions+=KIdentifier layoutOptions+=KIdentifier 'analyses'
	//	analyses+=Analysis+
	//	'output'
	//	outputType=OutputType? output=Output;
	public CompareJobElements getCompareJobAccess() {
		return pCompareJob;
	}
	
	public ParserRule getCompareJobRule() {
		return getCompareJobAccess().getRule();
	}

	//RangeJob:
	//	'rangejob' name=ID
	//	measureExecutionTime?='measureExecutionTime'?
	//	'resources' resources+=Resource+
	//	'layoutoptions'
	//	layoutOptions+=KIdentifier+
	//	'analyses'
	//	analyses+=Analysis+
	//	'rangeoption'
	//	rangeOption=QualifiedID
	//	rangeValues=Range ('rangeanalysis'
	//	rangeAnalysis=Analysis ('component' rangeAnalysisComponent=NATURAL)? |
	//	'rangeanalyses'
	//	rangeAnalyses+=Analysis+)
	//	'output'
	//	outputType=OutputType? output=Output;
	public RangeJobElements getRangeJobAccess() {
		return pRangeJob;
	}
	
	public ParserRule getRangeJobRule() {
		return getRangeJobAccess().getRule();
	}

	//Range:
	//	FloatRange | IntRange;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//FloatRange:
	//	'floatvalues' values+=Float (',' values+=Float)*;
	public FloatRangeElements getFloatRangeAccess() {
		return pFloatRange;
	}
	
	public ParserRule getFloatRangeRule() {
		return getFloatRangeAccess().getRule();
	}

	//IntRange:
	//	IntRangeRange | IntRangeValues;
	public IntRangeElements getIntRangeAccess() {
		return pIntRange;
	}
	
	public ParserRule getIntRangeRule() {
		return getIntRangeAccess().getRule();
	}

	//IntRangeValues:
	//	'intvalues' values+=NATURAL (',' values+=NATURAL)*;
	public IntRangeValuesElements getIntRangeValuesAccess() {
		return pIntRangeValues;
	}
	
	public ParserRule getIntRangeValuesRule() {
		return getIntRangeValuesAccess().getRule();
	}

	//IntRangeRange:
	//	'intrange' start=NATURAL 'to' end=NATURAL;
	public IntRangeRangeElements getIntRangeRangeAccess() {
		return pIntRangeRange;
	}
	
	public ParserRule getIntRangeRangeRule() {
		return getIntRangeRangeAccess().getRule();
	}

	/// *
	// * ---- Resources ---- 
	// * / Resource:
	//	ResourceReference | LocalResource;
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}

	//ResourceReference:
	//	'ref' resourceRefs+=[GlobalResourceRef]+;
	public ResourceReferenceElements getResourceReferenceAccess() {
		return pResourceReference;
	}
	
	public ParserRule getResourceReferenceRule() {
		return getResourceReferenceAccess().getRule();
	}

	//GlobalResourceRef:
	//	name=ID resources+=LocalResource;
	public GlobalResourceRefElements getGlobalResourceRefAccess() {
		return pGlobalResourceRef;
	}
	
	public ParserRule getGlobalResourceRefRule() {
		return getGlobalResourceRefAccess().getRule();
	}

	//LocalResource:
	//	path=STRING ('filter' filter=STRING);
	public LocalResourceElements getLocalResourceAccess() {
		return pLocalResource;
	}
	
	public ParserRule getLocalResourceRule() {
		return getLocalResourceAccess().getRule();
	}

	/// *
	// * ---- Output ---- 
	// * / Output:
	//	OutputReference | LocalOutput;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	//GlobalOutputRef:
	//	name=ID output=LocalOutput;
	public GlobalOutputRefElements getGlobalOutputRefAccess() {
		return pGlobalOutputRef;
	}
	
	public ParserRule getGlobalOutputRefRule() {
		return getGlobalOutputRefAccess().getRule();
	}

	//OutputReference:
	//	'ref' outputRef=[GlobalOutputRef];
	public OutputReferenceElements getOutputReferenceAccess() {
		return pOutputReference;
	}
	
	public ParserRule getOutputReferenceRule() {
		return getOutputReferenceAccess().getRule();
	}

	//LocalOutput:
	//	path=STRING;
	public LocalOutputElements getLocalOutputAccess() {
		return pLocalOutput;
	}
	
	public ParserRule getLocalOutputRule() {
		return getLocalOutputAccess().getRule();
	}

	//enum OutputType:
	//	csv | json // first literal is default
	//;
	public OutputTypeElements getOutputTypeAccess() {
		return eOutputType;
	}
	
	public EnumRule getOutputTypeRule() {
		return getOutputTypeAccess().getRule();
	}

	//Analysis:
	//	name=QualifiedID;
	public AnalysisElements getAnalysisAccess() {
		return pAnalysis;
	}
	
	public ParserRule getAnalysisRule() {
		return getAnalysisAccess().getRule();
	}

	//KIdentifier:
	//	{KIdentifier} id=ID
	//	'{' (persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)?
	//	'}';
	public KIdentifierElements getKIdentifierAccess() {
		return pKIdentifier;
	}
	
	public ParserRule getKIdentifierRule() {
		return getKIdentifierAccess().getRule();
	}

	//PersistentEntry:
	//	key=QualifiedID ':' value=PropertyValue;
	public PersistentEntryElements getPersistentEntryAccess() {
		return pPersistentEntry;
	}
	
	public ParserRule getPersistentEntryRule() {
		return getPersistentEntryAccess().getRule();
	}

	//QualifiedID:
	//	ID ('.' ID)*;
	public QualifiedIDElements getQualifiedIDAccess() {
		return pQualifiedID;
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//PropertyValue:
	//	BOOLEAN | STRING | Float | QualifiedID;
	public PropertyValueElements getPropertyValueAccess() {
		return pPropertyValue;
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//Float ecore::EFloat:
	//	TFLOAT | NATURAL
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}

	//terminal TFLOAT returns ecore::EFloat:
	//	('+' | '-') ('0'..'9'+ ('.' '0'..'9'*)? (('e' | 'E') ('+' | '-')? '0'..'9'+)?
	//	| '.' '0'..'9'+ (('e' | 'E') ('+' | '-')? '0'..'9'+)?) | '0'..'9'+ '.' '0'..'9'* (('e' | 'E') ('+' | '-')?
	//	'0'..'9'+)?
	//	| '.' '0'..'9'+ (('e' | 'E') ('+' | '-')? '0'..'9'+)?
	//	| '0'..'9'+ ('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getTFLOATRule() {
		return tTFLOAT;
	} 

	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getNATURALRule() {
		return tNATURAL;
	} 

	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal STRING: // chsch: added '\'' alternative! 
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | '\'' | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ID: // chsch: the optional leading '^' is the implicit keyword escape character
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 
}
