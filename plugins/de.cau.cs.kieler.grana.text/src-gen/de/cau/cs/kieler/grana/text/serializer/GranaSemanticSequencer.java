/*
 * generated by Xtext
 */
package de.cau.cs.kieler.grana.text.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.grana.text.grana.Analysis;
import de.cau.cs.kieler.grana.text.grana.CompareJob;
import de.cau.cs.kieler.grana.text.grana.EnumRange;
import de.cau.cs.kieler.grana.text.grana.FloatRange;
import de.cau.cs.kieler.grana.text.grana.GlobalOutputRef;
import de.cau.cs.kieler.grana.text.grana.GlobalResourceRef;
import de.cau.cs.kieler.grana.text.grana.Grana;
import de.cau.cs.kieler.grana.text.grana.GranaPackage;
import de.cau.cs.kieler.grana.text.grana.IntRangeRange;
import de.cau.cs.kieler.grana.text.grana.IntRangeValues;
import de.cau.cs.kieler.grana.text.grana.LocalOutput;
import de.cau.cs.kieler.grana.text.grana.LocalResource;
import de.cau.cs.kieler.grana.text.grana.OutputReference;
import de.cau.cs.kieler.grana.text.grana.RangeJob;
import de.cau.cs.kieler.grana.text.grana.RegularJob;
import de.cau.cs.kieler.grana.text.grana.ResourceReference;
import de.cau.cs.kieler.grana.text.services.GranaGrammarAccess;
import java.util.Map;
import java.util.Set;
import org.eclipse.elk.graph.ElkBendPoint;
import org.eclipse.elk.graph.ElkEdge;
import org.eclipse.elk.graph.ElkEdgeSection;
import org.eclipse.elk.graph.ElkGraphPackage;
import org.eclipse.elk.graph.ElkLabel;
import org.eclipse.elk.graph.ElkNode;
import org.eclipse.elk.graph.ElkPort;
import org.eclipse.elk.graph.text.serializer.ElkGraphSemanticSequencer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GranaSemanticSequencer extends ElkGraphSemanticSequencer {

	@Inject
	private GranaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GranaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GranaPackage.ANALYSIS:
				sequence_Analysis(context, (Analysis) semanticObject); 
				return; 
			case GranaPackage.COMPARE_JOB:
				sequence_CompareJob(context, (CompareJob) semanticObject); 
				return; 
			case GranaPackage.ENUM_RANGE:
				sequence_EnumRange(context, (EnumRange) semanticObject); 
				return; 
			case GranaPackage.FLOAT_RANGE:
				sequence_FloatRange(context, (FloatRange) semanticObject); 
				return; 
			case GranaPackage.GLOBAL_OUTPUT_REF:
				sequence_GlobalOutputRef(context, (GlobalOutputRef) semanticObject); 
				return; 
			case GranaPackage.GLOBAL_RESOURCE_REF:
				sequence_GlobalResourceRef(context, (GlobalResourceRef) semanticObject); 
				return; 
			case GranaPackage.GRANA:
				sequence_Grana(context, (Grana) semanticObject); 
				return; 
			case GranaPackage.INT_RANGE_RANGE:
				sequence_IntRangeRange(context, (IntRangeRange) semanticObject); 
				return; 
			case GranaPackage.INT_RANGE_VALUES:
				sequence_IntRangeValues(context, (IntRangeValues) semanticObject); 
				return; 
			case GranaPackage.LOCAL_OUTPUT:
				sequence_LocalOutput(context, (LocalOutput) semanticObject); 
				return; 
			case GranaPackage.LOCAL_RESOURCE:
				sequence_LocalResource(context, (LocalResource) semanticObject); 
				return; 
			case GranaPackage.OUTPUT_REFERENCE:
				sequence_OutputReference(context, (OutputReference) semanticObject); 
				return; 
			case GranaPackage.RANGE_JOB:
				sequence_RangeJob(context, (RangeJob) semanticObject); 
				return; 
			case GranaPackage.REGULAR_JOB:
				sequence_RegularJob(context, (RegularJob) semanticObject); 
				return; 
			case GranaPackage.RESOURCE_REFERENCE:
				sequence_ResourceReference(context, (ResourceReference) semanticObject); 
				return; 
			}
		else if (epackage == ElkGraphPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ElkGraphPackage.ELK_BEND_POINT:
				sequence_ElkBendPoint(context, (ElkBendPoint) semanticObject); 
				return; 
			case ElkGraphPackage.ELK_EDGE:
				sequence_EdgeLayout_ElkEdge(context, (ElkEdge) semanticObject); 
				return; 
			case ElkGraphPackage.ELK_EDGE_SECTION:
				if (rule == grammarAccess.getElkEdgeSectionRule()) {
					sequence_ElkEdgeSection(context, (ElkEdgeSection) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getElkSingleEdgeSectionRule()) {
					sequence_ElkSingleEdgeSection(context, (ElkEdgeSection) semanticObject); 
					return; 
				}
				else break;
			case ElkGraphPackage.ELK_LABEL:
				sequence_ElkLabel_ShapeLayout(context, (ElkLabel) semanticObject); 
				return; 
			case ElkGraphPackage.ELK_NODE:
				if (rule == grammarAccess.getElkNodeRule()) {
					sequence_ElkNode_ShapeLayout(context, (ElkNode) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLayoutConfigRule()) {
					sequence_LayoutConfig(context, (ElkNode) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootNodeRule()) {
					sequence_RootNode_ShapeLayout(context, (ElkNode) semanticObject); 
					return; 
				}
				else break;
			case ElkGraphPackage.ELK_PORT:
				sequence_ElkPort_ShapeLayout(context, (ElkPort) semanticObject); 
				return; 
			case ElkGraphPackage.ELK_PROPERTY_TO_VALUE_MAP_ENTRY:
				sequence_Property(context, (Map.Entry) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Analysis returns Analysis
	 *
	 * Constraint:
	 *     name=QualifiedId
	 */
	protected void sequence_Analysis(ISerializationContext context, Analysis semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GranaPackage.Literals.ANALYSIS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GranaPackage.Literals.ANALYSIS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnalysisAccess().getNameQualifiedIdParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Job returns CompareJob
	 *     CompareJob returns CompareJob
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         resources+=Resource+ 
	 *         layoutOptions+=LayoutConfig 
	 *         layoutOptions+=LayoutConfig 
	 *         analyses+=Analysis+ 
	 *         outputType=OutputType? 
	 *         output=Output
	 *     )
	 */
	protected void sequence_CompareJob(ISerializationContext context, CompareJob semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Range returns EnumRange
	 *     EnumRange returns EnumRange
	 *
	 * Constraint:
	 *     (values+=QualifiedIdValue values+=QualifiedIdValue*)
	 */
	protected void sequence_EnumRange(ISerializationContext context, EnumRange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Range returns FloatRange
	 *     FloatRange returns FloatRange
	 *
	 * Constraint:
	 *     (values+=FLOAT values+=FLOAT*)
	 */
	protected void sequence_FloatRange(ISerializationContext context, FloatRange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GlobalOutputRef returns GlobalOutputRef
	 *
	 * Constraint:
	 *     (name=ID output=LocalOutput)
	 */
	protected void sequence_GlobalOutputRef(ISerializationContext context, GlobalOutputRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GranaPackage.Literals.GLOBAL_OUTPUT_REF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GranaPackage.Literals.GLOBAL_OUTPUT_REF__NAME));
			if (transientValues.isValueTransient(semanticObject, GranaPackage.Literals.GLOBAL_OUTPUT_REF__OUTPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GranaPackage.Literals.GLOBAL_OUTPUT_REF__OUTPUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGlobalOutputRefAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGlobalOutputRefAccess().getOutputLocalOutputParserRuleCall_1_0(), semanticObject.getOutput());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GlobalResourceRef returns GlobalResourceRef
	 *
	 * Constraint:
	 *     (name=ID resources+=LocalResource)
	 */
	protected void sequence_GlobalResourceRef(ISerializationContext context, GlobalResourceRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Grana returns Grana
	 *
	 * Constraint:
	 *     (globalResources+=GlobalResourceRef* gloobalOutputs+=GlobalOutputRef* parallel?='parallel'? (executeAll?='all' | execute+=[Job|ID]+) jobs+=Job+)
	 */
	protected void sequence_Grana(ISerializationContext context, Grana semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Range returns IntRangeRange
	 *     IntRange returns IntRangeRange
	 *     IntRangeRange returns IntRangeRange
	 *
	 * Constraint:
	 *     (start=SIGNED_INT end=SIGNED_INT)
	 */
	protected void sequence_IntRangeRange(ISerializationContext context, IntRangeRange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GranaPackage.Literals.INT_RANGE_RANGE__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GranaPackage.Literals.INT_RANGE_RANGE__START));
			if (transientValues.isValueTransient(semanticObject, GranaPackage.Literals.INT_RANGE_RANGE__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GranaPackage.Literals.INT_RANGE_RANGE__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntRangeRangeAccess().getStartSIGNED_INTTerminalRuleCall_1_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getIntRangeRangeAccess().getEndSIGNED_INTTerminalRuleCall_3_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Range returns IntRangeValues
	 *     IntRange returns IntRangeValues
	 *     IntRangeValues returns IntRangeValues
	 *
	 * Constraint:
	 *     (values+=SIGNED_INT values+=SIGNED_INT*)
	 */
	protected void sequence_IntRangeValues(ISerializationContext context, IntRangeValues semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayoutConfig returns ElkNode
	 *
	 * Constraint:
	 *     (identifier=ID properties+=Property*)
	 */
	protected void sequence_LayoutConfig(ISerializationContext context, ElkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Output returns LocalOutput
	 *     LocalOutput returns LocalOutput
	 *
	 * Constraint:
	 *     path=STRING
	 */
	protected void sequence_LocalOutput(ISerializationContext context, LocalOutput semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GranaPackage.Literals.LOCAL_OUTPUT__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GranaPackage.Literals.LOCAL_OUTPUT__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalOutputAccess().getPathSTRINGTerminalRuleCall_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Resource returns LocalResource
	 *     LocalResource returns LocalResource
	 *
	 * Constraint:
	 *     (path=STRING filter=STRING recurse?='recurse'?)
	 */
	protected void sequence_LocalResource(ISerializationContext context, LocalResource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Output returns OutputReference
	 *     OutputReference returns OutputReference
	 *
	 * Constraint:
	 *     outputRef=[GlobalOutputRef|ID]
	 */
	protected void sequence_OutputReference(ISerializationContext context, OutputReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GranaPackage.Literals.OUTPUT_REFERENCE__OUTPUT_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GranaPackage.Literals.OUTPUT_REFERENCE__OUTPUT_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutputReferenceAccess().getOutputRefGlobalOutputRefIDTerminalRuleCall_1_0_1(), semanticObject.getOutputRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Job returns RangeJob
	 *     RangeJob returns RangeJob
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         measureExecutionTime?='measureExecutionTime'? 
	 *         resources+=Resource+ 
	 *         layoutOptions+=LayoutConfig+ 
	 *         analyses+=Analysis+ 
	 *         rangeOption=QualifiedId 
	 *         rangeValues=Range 
	 *         ((rangeAnalysis=Analysis rangeAnalysisComponent=SIGNED_INT?) | rangeAnalyses+=Analysis+) 
	 *         outputType=OutputType? 
	 *         output=Output
	 *     )
	 */
	protected void sequence_RangeJob(ISerializationContext context, RangeJob semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Job returns RegularJob
	 *     RegularJob returns RegularJob
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         layoutBeforeAnalysis?='layoutBeforeAnalysis'? 
	 *         measureExecutionTime?='measureExecutionTime'? 
	 *         resources+=Resource+ 
	 *         layoutOptions+=LayoutConfig+ 
	 *         analyses+=Analysis+ 
	 *         outputType=OutputType? 
	 *         output=Output
	 *     )
	 */
	protected void sequence_RegularJob(ISerializationContext context, RegularJob semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Resource returns ResourceReference
	 *     ResourceReference returns ResourceReference
	 *
	 * Constraint:
	 *     resourceRefs+=[GlobalResourceRef|ID]+
	 */
	protected void sequence_ResourceReference(ISerializationContext context, ResourceReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
