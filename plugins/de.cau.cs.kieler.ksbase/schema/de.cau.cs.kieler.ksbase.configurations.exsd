<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="de.cau.cs.kieler.ksbase" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="de.cau.cs.kieler.ksbase" id="configurations" name="KSBasE Configurations"/>
      </appinfo>
      <documentation>
         Extension point for configuring KIELER structure-based editing features for an editor.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <choice minOccurs="1" maxOccurs="unbounded">
            <element ref="configuration"/>
         </choice>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="configuration">
      <annotation>
         <documentation>
            Configures structure based editing features for an editor
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="transformations"/>
            <element ref="commandHandler" minOccurs="0" maxOccurs="1"/>
            <element ref="package" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="Xtend2TransformationClass" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="editorId" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.ui.editors/editor/@id"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="contextId" type="string">
            <annotation>
               <documentation>
                  The contextID which is used to assign keyboard shortcuts. If this property is empty, the default context is used.
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.ui.contexts/context/@id"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="defautlIcon" type="string">
            <annotation>
               <documentation>
                  If you want to add Toolbar contributions, you can select an icon which will be used by default for all items
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="checkVisibility" type="boolean">
            <annotation>
               <documentation>
                  Set this option to false, if you want to disable the visbility checks for the menu contributions.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="transformation">
      <annotation>
         <documentation>
            The transformation properties.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="transformationId" type="string" use="required">
            <annotation>
               <documentation>
                  The id of this transformation
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the transformation which is used in the menus
               </documentation>
            </annotation>
         </attribute>
         <attribute name="transformation" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the transformation method (without parameters). This method has to exist in the transformation file else it will be ignored
               </documentation>
            </annotation>
         </attribute>
         <attribute name="keyboardShortcut" type="string">
            <annotation>
               <documentation>
                  The keyboard shortcut for this transformation
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  Select an ico or png file, if you want to use an icon for the toolbar
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="validation" type="string">
            <annotation>
               <documentation>
                  An optional transformation that may be used to add additional validations for menu visibility and enablement.
Make sure that the transformation is short and fast, it is not recommended to call Java code for validation!
               </documentation>
            </annotation>
         </attribute>
         <attribute name="tooltip" type="string">
            <annotation>
               <documentation>
                  ToolTip message that is shown for all menu contributions
               </documentation>
            </annotation>
         </attribute>
         <attribute name="separated" type="boolean">
            <annotation>
               <documentation>
                  If this is set to true there will be a separator set to the menu before this element.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="menu" type="boolean" use="default" value="true">
            <annotation>
               <documentation>
                  Chose whether transformation should have a menu button (default: true)
               </documentation>
            </annotation>
         </attribute>
         <attribute name="toolbar" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  Chose whether transformation should have a menubar entry (default: false)
               </documentation>
            </annotation>
         </attribute>
         <attribute name="popup" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  Chose whether transformation should have a popup menu button (default: false)
               </documentation>
            </annotation>
         </attribute>
         <attribute name="popupbar" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="templates" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  Set whether to add this contribution to the &apos;Template&apos; sub menu.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="customMenuEntry" type="string">
            <annotation>
               <documentation>
                  You can also make your own menu entry using the eclipse menu extension point. This should be the command id associated with that menu entry.
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.ui.menus/menuContribution/command/@id"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="transformationCommand">
      <annotation>
         <documentation>
            Used to add a transformation command to a menu
         </documentation>
      </annotation>
      <complexType>
         <attribute name="transformationId" type="string">
            <annotation>
               <documentation>
                  The id of the referenced transformation
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="de.cau.cs.kieler.ksbase.configurations/configuration/transformations/transformation/@transformationId"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="transformations">
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="transformation"/>
         </sequence>
      </complexType>
   </element>

   <element name="commandHandler">
      <annotation>
         <documentation>
            Sets the command handler that will be called when a KSBasE menu contribution is activated. If this field is not set, the default handler de.cau.cs.kieler.ksbase.ui.handler.TransformationCommandHandler is used. The command handler will receive two parameters representing the active editor and the transformation that has been activated.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Sets the command handler that will be called when a KSBasE menu contribution is activated. If this field is not set, the default handler de.cau.cs.kieler.ksbase.ui.handler.TransformationCommandHandler is used. The command handler will receive two parameters representing the active editor and the transformation that has been activated.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.core.commands.AbstractHandler:"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="package">
      <annotation>
         <documentation>
            An EMF package that represents a specific metamodel.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the main package that represents the underlying meta model. This class has to extend &apos;emf.ecore.EPackage&apos;.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.emf.ecore.EPackage:"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="Xtend2TransformationClass">
      <complexType>
         <attribute name="TransformationClass" type="string" use="required">
            <annotation>
               <documentation>
                  An Xtend2 transformation claas
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="java.lang.Object:"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         0.1
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         &lt;p&gt;
The &lt;code&gt;plugin.xml&lt;/code&gt; file in the &lt;code&gt;de.cau.cs.kieler.synccharts.ksbase&lt;/code&gt; plugin makes extensive use of the &lt;code&gt;de.cau.cs.kieler.ksbase&lt;/code&gt; extension point.
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         &lt;p&gt;
By using this extension point, the &lt;code&gt;de.cau.cs.kieler.ksbase&lt;/code&gt; and &lt;code&gt;de.cau.cs.kieler.ksbase.ui&lt;/code&gt; will use this configuration to create &lt;code&gt;org.eclipse.ui.menus&lt;/code&gt; extensions for each menu transformation command. Furthermore, a set of visibility and enablement expressions will be added to ensure the menus are visible in the given editor only.
&lt;/p&gt;
&lt;p&gt;
In the current version of the &lt;code&gt;de.cau.cs.kieler.ksbase&lt;/code&gt; plug-ins the transformations are executed with the Xtend facade by default. The mapping of parameters to diagram objects is done automatically.
&lt;/p&gt;
      </documentation>
   </annotation>


   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         Copyright 2009 by Real-Time and Embedded Systems Group, Department
of Computer Science, Kiel University
      </documentation>
   </annotation>

</schema>
