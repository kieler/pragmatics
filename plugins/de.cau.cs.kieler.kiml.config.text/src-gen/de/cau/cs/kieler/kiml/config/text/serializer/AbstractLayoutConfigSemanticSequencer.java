/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kiml.config.text.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.kiml.config.text.services.LayoutConfigGrammarAccess;
import java.util.Map;
import java.util.Set;
import org.eclipse.elk.graph.ElkBendPoint;
import org.eclipse.elk.graph.ElkEdge;
import org.eclipse.elk.graph.ElkEdgeSection;
import org.eclipse.elk.graph.ElkGraphPackage;
import org.eclipse.elk.graph.ElkLabel;
import org.eclipse.elk.graph.ElkNode;
import org.eclipse.elk.graph.ElkPort;
import org.eclipse.elk.graph.text.serializer.ElkGraphSemanticSequencer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;

@SuppressWarnings("all")
public abstract class AbstractLayoutConfigSemanticSequencer extends ElkGraphSemanticSequencer {

	@Inject
	private LayoutConfigGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ElkGraphPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ElkGraphPackage.ELK_BEND_POINT:
				sequence_ElkBendPoint(context, (ElkBendPoint) semanticObject); 
				return; 
			case ElkGraphPackage.ELK_EDGE:
				sequence_EdgeLayout_ElkEdge(context, (ElkEdge) semanticObject); 
				return; 
			case ElkGraphPackage.ELK_EDGE_SECTION:
				if (rule == grammarAccess.getElkEdgeSectionRule()) {
					sequence_ElkEdgeSection(context, (ElkEdgeSection) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getElkSingleEdgeSectionRule()) {
					sequence_ElkSingleEdgeSection(context, (ElkEdgeSection) semanticObject); 
					return; 
				}
				else break;
			case ElkGraphPackage.ELK_LABEL:
				sequence_ElkLabel_ShapeLayout(context, (ElkLabel) semanticObject); 
				return; 
			case ElkGraphPackage.ELK_NODE:
				if (rule == grammarAccess.getElkNodeRule()) {
					sequence_ElkNode(context, (ElkNode) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRefElkNodeRule()) {
					sequence_RefElkNode(context, (ElkNode) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootNodeRule()) {
					sequence_RootNode(context, (ElkNode) semanticObject); 
					return; 
				}
				else break;
			case ElkGraphPackage.ELK_PORT:
				sequence_ElkPort_ShapeLayout(context, (ElkPort) semanticObject); 
				return; 
			case ElkGraphPackage.ELK_PROPERTY_TO_VALUE_MAP_ENTRY:
				sequence_Property(context, (Map.Entry) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ElkNode returns ElkNode
	 *
	 * Constraint:
	 *     (identifier=ID properties+=Property* children+=RefElkNode*)
	 */
	protected void sequence_ElkNode(ISerializationContext context, ElkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefElkNode returns ElkNode
	 *
	 * Constraint:
	 *     (identifier=ID properties+=Property*)
	 */
	protected void sequence_RefElkNode(ISerializationContext context, ElkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RootNode returns ElkNode
	 *
	 * Constraint:
	 *     children+=ElkNode+
	 */
	protected void sequence_RootNode(ISerializationContext context, ElkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
