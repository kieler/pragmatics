/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kiml.config.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.elk.graph.text.services.ElkGraphGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LayoutConfigGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.config.text.LayoutConfig.RootNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElkNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cChildrenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildrenElkNodeParserRuleCall_1_0 = (RuleCall)cChildrenAssignment_1.eContents().get(0);
		
		//RootNode ElkNode:
		//	{ElkNode} children+=ElkNode+
		@Override public ParserRule getRule() { return rule; }

		//{ElkNode} children+=ElkNode+
		public Group getGroup() { return cGroup; }

		//{ElkNode}
		public Action getElkNodeAction_0() { return cElkNodeAction_0; }

		//children+=ElkNode+
		public Assignment getChildrenAssignment_1() { return cChildrenAssignment_1; }

		//ElkNode
		public RuleCall getChildrenElkNodeParserRuleCall_1_0() { return cChildrenElkNodeParserRuleCall_1_0; }
	}

	public class ElkNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.config.text.LayoutConfig.ElkNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRefKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cChildrenRefElkNodeParserRuleCall_3_1_0 = (RuleCall)cChildrenAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ElkNode:
		//	identifier=ID '{'
		//	properties+=Property* ('ref' children+=RefElkNode)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//identifier=ID '{' properties+=Property* ('ref' children+=RefElkNode)* '}'
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }

		//('ref' children+=RefElkNode)*
		public Group getGroup_3() { return cGroup_3; }

		//'ref'
		public Keyword getRefKeyword_3_0() { return cRefKeyword_3_0; }

		//children+=RefElkNode
		public Assignment getChildrenAssignment_3_1() { return cChildrenAssignment_3_1; }

		//RefElkNode
		public RuleCall getChildrenRefElkNodeParserRuleCall_3_1_0() { return cChildrenRefElkNodeParserRuleCall_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RefElkNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kiml.config.text.LayoutConfig.RefElkNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RefElkNode ElkNode:
		//	identifier=ID '{'
		//	properties+=Property*
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//identifier=ID '{' properties+=Property* '}'
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private final RootNodeElements pRootNode;
	private final ElkNodeElements pElkNode;
	private final RefElkNodeElements pRefElkNode;
	
	private final Grammar grammar;

	private final ElkGraphGrammarAccess gaElkGraph;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LayoutConfigGrammarAccess(GrammarProvider grammarProvider,
		ElkGraphGrammarAccess gaElkGraph,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaElkGraph = gaElkGraph;
		this.gaTerminals = gaTerminals;
		this.pRootNode = new RootNodeElements();
		this.pElkNode = new ElkNodeElements();
		this.pRefElkNode = new RefElkNodeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.kiml.config.text.LayoutConfig".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ElkGraphGrammarAccess getElkGraphGrammarAccess() {
		return gaElkGraph;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RootNode ElkNode:
	//	{ElkNode} children+=ElkNode+
	public RootNodeElements getRootNodeAccess() {
		return pRootNode;
	}
	
	public ParserRule getRootNodeRule() {
		return getRootNodeAccess().getRule();
	}

	//ElkNode:
	//	identifier=ID '{'
	//	properties+=Property* ('ref' children+=RefElkNode)*
	//	'}';
	public ElkNodeElements getElkNodeAccess() {
		return pElkNode;
	}
	
	public ParserRule getElkNodeRule() {
		return getElkNodeAccess().getRule();
	}

	//RefElkNode ElkNode:
	//	identifier=ID '{'
	//	properties+=Property*
	//	'}'
	public RefElkNodeElements getRefElkNodeAccess() {
		return pRefElkNode;
	}
	
	public ParserRule getRefElkNodeRule() {
		return getRefElkNodeAccess().getRule();
	}

	//ElkLabel:
	//	'label' (identifier=ID ':')? text=STRING ('{'
	//	ShapeLayout?
	//	properties+=Property*
	//	labels+=ElkLabel*
	//	'}')?;
	public ElkGraphGrammarAccess.ElkLabelElements getElkLabelAccess() {
		return gaElkGraph.getElkLabelAccess();
	}
	
	public ParserRule getElkLabelRule() {
		return getElkLabelAccess().getRule();
	}

	//ElkPort:
	//	'port' identifier=ID ('{'
	//	ShapeLayout?
	//	properties+=Property*
	//	labels+=ElkLabel*
	//	'}')?;
	public ElkGraphGrammarAccess.ElkPortElements getElkPortAccess() {
		return gaElkGraph.getElkPortAccess();
	}
	
	public ParserRule getElkPortRule() {
		return getElkPortAccess().getRule();
	}

	//fragment ShapeLayout returns ElkShape:
	//	'layout' '[' (('position' ':' x=Number ',' y=Number)?
	//	& ('size' ':' width=Number ',' height=Number)?) ']';
	public ElkGraphGrammarAccess.ShapeLayoutElements getShapeLayoutAccess() {
		return gaElkGraph.getShapeLayoutAccess();
	}
	
	public ParserRule getShapeLayoutRule() {
		return getShapeLayoutAccess().getRule();
	}

	/// * SuppressWarnings[BidirectionalReference] * / ElkEdge:
	//	'edge' (identifier=ID ':')?
	//	sources+=[ElkConnectableShape|QualifiedId] (',' sources+=[ElkConnectableShape|QualifiedId])* '->'
	//	targets+=[ElkConnectableShape|QualifiedId] (',' targets+=[ElkConnectableShape|QualifiedId])* ('{'
	//	EdgeLayout?
	//	properties+=Property*
	//	labels+=ElkLabel*
	//	'}')?;
	public ElkGraphGrammarAccess.ElkEdgeElements getElkEdgeAccess() {
		return gaElkGraph.getElkEdgeAccess();
	}
	
	public ParserRule getElkEdgeRule() {
		return getElkEdgeAccess().getRule();
	}

	//fragment EdgeLayout returns ElkEdge:
	//	'layout' '[' (sections+=ElkSingleEdgeSection | sections+=ElkEdgeSection+) ']';
	public ElkGraphGrammarAccess.EdgeLayoutElements getEdgeLayoutAccess() {
		return gaElkGraph.getEdgeLayoutAccess();
	}
	
	public ParserRule getEdgeLayoutRule() {
		return getEdgeLayoutAccess().getRule();
	}

	//ElkSingleEdgeSection ElkEdgeSection:
	//	{ElkEdgeSection} ((('incoming' ':' incomingShape=[ElkConnectableShape|QualifiedId])?
	//	& ('outgoing' ':' outgoingShape=[ElkConnectableShape|QualifiedId])?
	//	& ('start' ':' startX=Number ',' startY=Number)?
	//	& ('end' ':' endX=Number ',' endY=Number)?) ('bends' ':' bendPoints+=ElkBendPoint ('|' bendPoints+=ElkBendPoint)*)?
	//	properties+=Property*)
	public ElkGraphGrammarAccess.ElkSingleEdgeSectionElements getElkSingleEdgeSectionAccess() {
		return gaElkGraph.getElkSingleEdgeSectionAccess();
	}
	
	public ParserRule getElkSingleEdgeSectionRule() {
		return getElkSingleEdgeSectionAccess().getRule();
	}

	/// * SuppressWarnings[BidirectionalReference] * / ElkEdgeSection:
	//	'section' identifier=ID ('->' outgoingSections+=[ElkEdgeSection] (',' outgoingSections+=[ElkEdgeSection])*)? '['
	//	((('incoming' ':' incomingShape=[ElkConnectableShape|QualifiedId])?
	//	& ('outgoing' ':' outgoingShape=[ElkConnectableShape|QualifiedId])?
	//	& ('start' ':' startX=Number ',' startY=Number)?
	//	& ('end' ':' endX=Number ',' endY=Number)?) ('bends' ':' bendPoints+=ElkBendPoint ('|' bendPoints+=ElkBendPoint)*)?
	//	properties+=Property*) ']';
	public ElkGraphGrammarAccess.ElkEdgeSectionElements getElkEdgeSectionAccess() {
		return gaElkGraph.getElkEdgeSectionAccess();
	}
	
	public ParserRule getElkEdgeSectionRule() {
		return getElkEdgeSectionAccess().getRule();
	}

	//ElkBendPoint:
	//	x=Number ',' y=Number;
	public ElkGraphGrammarAccess.ElkBendPointElements getElkBendPointAccess() {
		return gaElkGraph.getElkBendPointAccess();
	}
	
	public ParserRule getElkBendPointRule() {
		return getElkBendPointAccess().getRule();
	}

	//QualifiedId:
	//	ID ('.' ID)*;
	public ElkGraphGrammarAccess.QualifiedIdElements getQualifiedIdAccess() {
		return gaElkGraph.getQualifiedIdAccess();
	}
	
	public ParserRule getQualifiedIdRule() {
		return getQualifiedIdAccess().getRule();
	}

	//Number ecore::EDouble:
	//	SIGNED_INT | FLOAT
	public ElkGraphGrammarAccess.NumberElements getNumberAccess() {
		return gaElkGraph.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Property ElkPropertyToValueMapEntry:
	//	key=PropertyKey ':' (value=StringValue | value=QualifiedIdValue | value=NumberValue | value=BooleanValue)
	public ElkGraphGrammarAccess.PropertyElements getPropertyAccess() {
		return gaElkGraph.getPropertyAccess();
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//PropertyKey IProperty hidden():
	//	ID ('.' ID)*
	public ElkGraphGrammarAccess.PropertyKeyElements getPropertyKeyAccess() {
		return gaElkGraph.getPropertyKeyAccess();
	}
	
	public ParserRule getPropertyKeyRule() {
		return getPropertyKeyAccess().getRule();
	}

	//StringValue ecore::EJavaObject:
	//	STRING
	public ElkGraphGrammarAccess.StringValueElements getStringValueAccess() {
		return gaElkGraph.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//QualifiedIdValue ecore::EJavaObject:
	//	QualifiedId
	public ElkGraphGrammarAccess.QualifiedIdValueElements getQualifiedIdValueAccess() {
		return gaElkGraph.getQualifiedIdValueAccess();
	}
	
	public ParserRule getQualifiedIdValueRule() {
		return getQualifiedIdValueAccess().getRule();
	}

	//NumberValue ecore::EJavaObject:
	//	SIGNED_INT | FLOAT
	public ElkGraphGrammarAccess.NumberValueElements getNumberValueAccess() {
		return gaElkGraph.getNumberValueAccess();
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}

	//BooleanValue ecore::EJavaObject:
	//	'true' | 'false'
	public ElkGraphGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaElkGraph.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//terminal SIGNED_INT returns ecore::EInt:
	//	('+' | '-')? INT;
	public TerminalRule getSIGNED_INTRule() {
		return gaElkGraph.getSIGNED_INTRule();
	} 

	//terminal FLOAT returns ecore::EDouble:
	//	('+' | '-')? (INT '.' INT | INT ('.' INT)? ('e' | 'E') ('+' | '-')? INT);
	public TerminalRule getFLOATRule() {
		return gaElkGraph.getFLOATRule();
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
