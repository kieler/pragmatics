/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2009 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
grammar de.cau.cs.kieler.kiml.graphviz.dot.GraphvizDot with org.eclipse.xtext.common.Terminals
hidden(WS, ML_COMMENT, SL_COMMENT, PREC_LINE)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/**
 * TMF Xtext grammar for the DOT Language, which is defined at
 *      http://www.graphviz.org/content/dot-language
 */
generate dot "http://kieler.cs.cau.de/GraphvizDot"


GraphvizModel: (graphs+=Graph)*;


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  graph:      [ 'strict' ] ('graph' | 'digraph') [ ID ] '{' stmt_list '}'
 */
Graph: (strict?="strict")? type=GraphType (name=DotID)?
    "{" (statements+=Statement)* "}";


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  stmt_list:  [ stmt [ ';' ] [ stmt_list ] ]
 *  stmt:       node_stmt | edge_stmt | attr_stmt | ID '=' ID | subgraph
 */
Statement: (NodeStatement | EdgeStatement | AttributeStatement | Attribute
    | Subgraph) ";"?;

Attribute: name=DotID "=" value=DotID;


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  node_stmt:  node_id [ attr_list ]
 */
NodeStatement: node=Node
    ("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?;


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  node_id:    ID [ port ]
 */
Node: name=DotID (":" port=Port)?;


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  edge_stmt:  (node_id | subgraph) edgeRHS [ attr_list ]
 */
EdgeStatement: sourceNode=Node (edgeTargets+=EdgeTarget)+
    ("[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]")?;


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  edgeRHS:    edgeop (node_id | subgraph) [ edgeRHS ]
 */
EdgeTarget: operator=EdgeOperator (targetSubgraph=Subgraph | targetnode=Node);


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  attr_stmt:  ('graph' | 'node' | 'edge') attr_list
 */
AttributeStatement: type=AttributeType
    "[" (attributes+=ListAttribute (","? attributes+=ListAttribute)*)? "]";


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  subgraph:   [ 'subgraph' [ ID ] ] '{' stmt_list '}'
 */
Subgraph: {Subgraph} ("subgraph" (name=ID)?)? "{" (statements+=Statement)* "}";


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  attr_list:  '[' [ a_list ] ']' [ attr_list ]
 *  a_list:     ID [ '=' ID ] [ ',' ] [ a_list ]
 */
ListAttribute returns Attribute: name=DotID ("=" value=DotID)?;


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  port:       ':' ID [ ':' compass_pt ] | ':' compass_pt
 *  compass_pt: (n | ne | e | se | s | sw | w | nw | c | _)
 */
Port: name=DotID (":" compass_pt=ID)?;


/*~~~~Original definition~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  An ID is one of the following:
 *    - Any string of alphabetic ([a-zA-Z'200-'377]) characters, underscores
 *      ('_') or digits ([0-9]), not beginning with a digit;
 *    - a numeral [-]?(.[0-9]+ | [0-9]+(.[0-9]*)? );
 *    - any double-quoted string ("...") possibly containing escaped quotes ('");
 *    - an HTML string (<...>). 
 */
DotID: ID | INT | FLOAT | STRING;


enum EdgeOperator: directed="->" | undirected="--";
enum GraphType: graph | digraph;
enum AttributeType: graph | node | edge;

terminal INT returns ecore::EInt: ('-')?('0'..'9')+;
terminal ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal FLOAT: ('-')?(('0'..'9')* '.'('0'..'9')+);
terminal STRING: '"' ('\\' '"' | !'"')* '"';
terminal PREC_LINE: '#' !('\n'|'\r')* ('\r'? '\n')? ;
