module de.cau.cs.kieler.kgraph.text.KGraph

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow {
    
    component = XtextGenerator {
        configuration = {
            project = StandardProjectConfig {
                baseName = "de.cau.cs.kieler.kgraph.text"
                rootPath = rootPath
                runtimeTest = {
                    enabled = true
                    // test plugins are located in a separate folder 
                    root  = "../../test/de.cau.cs.kieler.kgraph.text.tests"
                }
                eclipsePlugin = {
                    enabled = true
                }
                createEclipseMetaData = true
            }
            code = {
                encoding = "UTF-8"
                fileHeader = "/*\n * generated by Xtext \${version}\n */"
                preferXtendStubs = false
            }
        }
        
        /*
         * The KGraph Text Language
         */
        language = StandardLanguage {
            name = "de.cau.cs.kieler.kgraph.text.KGraph"
            fileExtensions = "kgt"
            
            referencedResource = "platform:/resource/de.cau.cs.kieler.klighd.kgraph/model/kgraph.genmodel"
            referencedResource = "platform:/resource/de.cau.cs.kieler.klighd.krendering/model/krendering.genmodel"
            
            serializer = {
                // to generate the stubs for Semantic/Syntactic Sequencers
                generateStub = true
            }
            validator = {
                // composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }
            
        }
        
        /*
         * The GRandom Language
         */
        language = StandardLanguage {
            name = "de.cau.cs.kieler.kgraph.text.grandom.GRandom"
            fileExtensions = "rdg"

            serializer = {
                generateStub = false
            }
            validator = {
                // composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }
            
            
        }
            
            
            
            /*
             * Options from the old mwe2 workflow for future reference in case something breaks. 
             */
           /*
            fragment = grammarAccess.GrammarAccessFragment {}

            // the serialization component
            fragment = serializer.SerializerFragment {}
            
            // a custom ResourceFactory for use with EMF 
            fragment = resourceFactory.ResourceFactoryFragment {
                fileExtensions = file.extensions
            }

            // the Antlr parser
            fragment = parser.antlr.XtextAntlrGeneratorFragment {
                options = {
                    classSplitting = true
                }
            }

            // java-based API for validation 
            fragment = validation.JavaValidatorFragment {
                // composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                // composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            // scoping and exporting API
            fragment = scoping.ImportURIScopingFragment {}
            fragment = exporting.SimpleNamesFragment {}

            // formatter API 
            fragment = ecore2xtext.FormatterFragment {}

            // labeling API 
            fragment = labeling.LabelProviderFragment {}

            // outline API 
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}

            // java-based API for content assistance 
            fragment = contentAssist.JavaBasedContentAssistFragment {}

            // antlr parser generator tailored for content assist 
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {
                options = {
                    classSplitting = true
                }
            }

            // provides a compare view
            fragment = compare.CompareFragment {
                fileExtensions = file.extensions
            }

            // quickfix API 
            fragment = quickfix.QuickfixProviderFragment {}
            */
    
    }
}

