/*******************************************************************************
 * Copyright (c) 2016 Kiel University and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Kiel University - initial API and implementation
 *******************************************************************************/
package de.cau.cs.kieler.kiml.libavoid

import org.eclipse.elk.core.options.EdgeRouting
import de.cau.cs.kieler.kiml.libavoid.LibavoidLayoutProvider
import org.eclipse.elk.core.options.PortConstraints

bundle {
    label "Libavoid Connector Routing"
    metadataClass options.LibavoidMetaDataProvider
}

category edge {
    label "Edge Routing"
    description "Only route the edges without touching the node&apos;s positions."
}

algorithm libavoid(LibavoidLayoutProvider) {
    label "Libavoid"
    description
        "libavoid is a cross-platform C++ library providing fast, object-avoiding orthogonal 
        and polyline connector routing for use in interactive diagram editors."
    metadataClass options.LibavoidOptions
    category edge
        
       supports org.eclipse.elk.debugMode = false
        
       supports org.eclipse.elk.direction
       supports org.eclipse.elk.edgeRouting = EdgeRouting.ORTHOGONAL
       supports org.eclipse.elk.portConstraints = PortConstraints.FREE
       
       supports de.cau.cs.kieler.kiml.libavoid.segmentPenalty
       supports de.cau.cs.kieler.kiml.libavoid.anglePenalty
       supports de.cau.cs.kieler.kiml.libavoid.crossingPenalty
       supports de.cau.cs.kieler.kiml.libavoid.clusterCrossingPenalty
       supports de.cau.cs.kieler.kiml.libavoid.fixedSharedPathPenalty
       supports de.cau.cs.kieler.kiml.libavoid.portDirectionPenalty
       supports de.cau.cs.kieler.kiml.libavoid.shapeBufferDistance
       supports de.cau.cs.kieler.kiml.libavoid.idealNudgingDistance
       supports de.cau.cs.kieler.kiml.libavoid.nudgeOrthogonalSegmentsConnectedToShapes
       supports de.cau.cs.kieler.kiml.libavoid.improveHyperedgeRoutesMovingJunctions
       supports de.cau.cs.kieler.kiml.libavoid.penaliseOrthogonalSharedPathsAtConnEnds
       supports de.cau.cs.kieler.kiml.libavoid.nudgeOrthogonalTouchingColinearSegments
       supports de.cau.cs.kieler.kiml.libavoid.performUnifyingNudgingPreprocessingStep
       supports de.cau.cs.kieler.kiml.libavoid.improveHyperedgeRoutesMovingAddingAndDeletingJunctions
}      

// --- Layout Options
// NOTE: Do not group this layout options unless you change the libavoid server as well.

option segmentPenalty: double {
    label "Segment Penalty"
    description 
        "This penalty is applied for each segment in the connector path beyond the first. 
        This should always normally be set when doing orthogonal routing to prevent 
        step-like connector paths."
    default = 10
    targets parents
}
      
option anglePenalty: double {
    label "Angle Penalty"
    description 
        "This penalty is applied in its full amount to tight acute bends in the connector path. 
        A smaller portion of the penalty is applied for slight bends, i.e., where the bend is close 
        to 180 degrees. This is useful for polyline routing where there is some evidence that tighter 
        corners are worse for readability, but that slight bends might not be so bad, 
        especially when smoothed by curves. "
    default = 0
    targets parents
}

advanced option crossingPenalty: double {
    label "Crossing Penalty"
    description 
        "This penalty is applied whenever a connector path crosses another connector path. 
        It takes shared paths into consideration and the penalty is only applied 
        if there is an actual crossing. "
    default = 0
    targets parents
}

advanced option clusterCrossingPenalty: double {
    label "Cluster Crossing Penalty"
    description "This penalty is applied whenever a connector path crosses a cluster boundary."
    default = 4000
    targets parents
}

advanced option fixedSharedPathPenalty: double {
    label "Fixed Shared Path Penalty"
    description
        "This penalty is applied whenever a connector path shares some segments with an immovable
        portion of an existing connector route (such as the first or last segment of a connector)."
    default = 0
    targets parents
}

advanced option portDirectionPenalty: double {
    label "Port Direction Penalty"
    description
        "This penalty is applied to port selection choice when the other end of the connector 
        being routed does not appear in any of the 90 degree visibility cones centered on the 
        visibility directions for the port. "
    default = 100
    targets parents
}

option shapeBufferDistance: double {
    label "Shape Buffer Distance"
    description
        "This parameter defines the spacing distance that will be added to the sides of each 
        shape when determining obstacle sizes for routing. This controls how closely connectors 
        pass shapes, and can be used to prevent connectors overlapping with shape boundaries.
        By default, this distance is set to a value of 4."
    default = 4
    targets parents
}

option idealNudgingDistance: double {
    label "Ideal Nudging Distance"
    description
        "This parameter defines the spacing distance that will be used for nudging apart 
        overlapping corners and line segments of connectors. By default, 
        this distance is set to a value of 4. "
    default = 4
    targets parents
}

option nudgeOrthogonalSegmentsConnectedToShapes: boolean {
    label "Nudge Orthogonal Segments"
    description
        "This option causes the final segments of connectors, which are attached to shapes, 
        to be nudged apart. Usually these segments are fixed, since they are considered to be 
        attached to ports. This option is not set by default. "
    default = false
    targets parents
}


option improveHyperedgeRoutesMovingJunctions: boolean {
    label "Improve Hyperedge Routes"
    description
        "This option causes hyperedge routes to be locally improved fixing obviously bad paths. 
        As part of this process libavoid will effectively move junctions, setting new ideal positions 
        ( JunctionRef::recommendedPosition() ) for each junction. "
    default = true
    targets parents
}

advanced option penaliseOrthogonalSharedPathsAtConnEnds: boolean {
    label "Penalise Orthogonal Shared Paths"
    description 
        "This option penalises and attempts to reroute orthogonal shared connector paths terminating 
        at a common junction or shape connection pin. When multiple connector paths enter or leave 
        the same side of a junction (or shape pin), the router will attempt to reroute these to 
        different sides of the junction or different shape pins. This option depends on the 
        fixedSharedPathPenalty penalty having been set. "
    default = false
    targets parents
}

option nudgeOrthogonalTouchingColinearSegments: boolean {
    label "Nudge Orthogonal Touching Colinear Segments"
    description
        "This option can be used to control whether colinear line segments that touch just at 
        their ends will be nudged apart. The overlap will usually be resolved in the other dimension, 
        so this is not usually required and is not set by default. "
    default = false
    targets parents
}

advanced option performUnifyingNudgingPreprocessingStep: boolean {
    label "Perform Unifying Nudging Preprocessing"
    description
        "This option can be used to control whether the router performs a preprocessing step before 
        orthogonal nudging where is tries to unify segments and centre them in free space. 
        This generally results in better quality ordering and nudging."
    default = true
    targets parents
}

advanced option improveHyperedgeRoutesMovingAddingAndDeletingJunctions: boolean {
    label "Improve Hyperedge Routes Add Delete"
    description 
        "This option causes hyperedge routes to be locally improved fixing obviously bad paths."
    default = true
    targets parents
}
