/*
 * generated by Xtext
 */
package de.cau.cs.kieler.uml.sequence.text.formatting

import com.google.inject.Inject
import de.cau.cs.kieler.uml.sequence.text.services.SequenceGrammarAccess
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class SequenceFormatter extends AbstractDeclarativeFormatter {

    @Inject extension SequenceGrammarAccess

    SequenceGrammarAccess f

    /**
     * @{inheritDoc}
     */
    override protected void configureFormatting(FormattingConfig c) {
        f = getGrammarAccess as SequenceGrammarAccess

        // Formatting at specific keywords
        for (bracket : findKeywordPairs('{', '}')) {
            c.setIndentation(bracket.first, bracket.second)
            c.setLinewrap(1).after(bracket.first)
            c.setLinewrap(1).before(bracket.second)
        }
        
        for (note : findKeywords('sourceNote')) {
            c.setLinewrap(1).before(note)
            c.setIndentationIncrement.before(note)
            c.setIndentationDecrement.after(note)
        }
        
        for (note : findKeywords('targetNote')) {
            c.setLinewrap(1).before(note)
            c.setIndentationIncrement.before(note)
            c.setIndentationDecrement.after(note)
        }
        
        for (note : findKeywords('note')) {
            c.setLinewrap(1).before(note)
            c.setIndentationIncrement.before(note)
            c.setIndentationDecrement.after(note)
        }
        
        for (exec : findKeywords('startExec')) {
            c.setLinewrap(1).before(exec)
            c.setIndentationIncrement.before(exec)
            c.setIndentationDecrement.after(exec)
            c.setLinewrap(1).after(exec)
        }
        
        for (exec : findKeywords('endExec')) {
            c.setLinewrap(1).before(exec)
            c.setIndentationIncrement.before(exec)
            c.setIndentationDecrement.after(exec)
        }
        
        for (exec : findKeywords('sourceStartEndExec')) {
            c.setLinewrap(1).before(exec)
            c.setIndentationIncrement.before(exec)
            c.setIndentationDecrement.after(exec)
            c.setLinewrap(1).after(exec)
        }
        
        for (exec : findKeywords('targetStartEndExec')) {
            c.setLinewrap(1).before(exec)
            c.setIndentationIncrement.before(exec)
            c.setIndentationDecrement.after(exec)
            c.setLinewrap(1).after(exec)
        }
        
        for (exec : findKeywords('startEndExec')) {
            c.setLinewrap(1).before(exec)
            c.setIndentationIncrement.before(exec)
            c.setIndentationDecrement.after(exec)
            c.setLinewrap(1).after(exec)
        }
        
        for (exec : findKeywords('targetStartExec')) {
            c.setLinewrap(1).before(exec)
            c.setIndentationIncrement.before(exec)
            c.setIndentationDecrement.after(exec)
            c.setLinewrap(1).after(exec)
        }
        
        for (exec : findKeywords('sourceStartExec')) {
            c.setLinewrap(1).before(exec)
            c.setIndentationIncrement.before(exec)
            c.setIndentationDecrement.after(exec)
            c.setLinewrap(1).after(exec)
        }
        
        for (exec : findKeywords('sourceEndExec')) {
            c.setLinewrap(1).before(exec)
            c.setIndentationIncrement.before(exec)
            c.setIndentationDecrement.after(exec)
        }
        
        for (exec : findKeywords('targetEndExec')) {
            c.setLinewrap(1).before(exec)
            c.setIndentationIncrement.before(exec)
            c.setIndentationDecrement.after(exec)
        }
        
        for (comma : findKeywords(',')) {
            c.setNoLinewrap().before(comma)
            c.setNoSpace().before(comma)
        }
        
        for (lifelines : findKeywords('lifelines')) {
            c.setLinewrap(1).before(lifelines)
            c.setIndentationIncrement.before(lifelines)
            c.setIndentationDecrement.after(lifelines)
        }

        // Formatting before every rule
        c.setLinewrap().before(f.getLifelineRule)
        c.setLinewrap().before(f.getTwoLifelineMessageRule)
        c.setLinewrap().before(f.getOneLifelineMessageRule)
        c.setLinewrap().before(f.destroyLifelineEventRule)
        c.setLinewrap().before(f.selfMessageRule)
        c.setLinewrap().before(f.getFragmentRule)
        c.setLinewrap().before(f.getRefinementRule)
        
        // Formatting before and after the lifeline/usecase declaration(s)
        c.setLinewrap(2).before(f.getSequenceDiagramAccess.lifelinesAssignment_3.eContents.get(0))
        c.setLinewrap(2).after(f.getSequenceDiagramAccess.lifelinesAssignment_3.eContents.last)
        
        // Formatting for comments
        c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule)
        c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule)
        c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule)
    }
}