/*
* generated by Xtext
*/
package de.cau.cs.kieler.kiml.config.text.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.kiml.config.text.services.LayoutConfigGrammarAccess;

public class LayoutConfigParser extends AbstractContentAssistParser {
	
	@Inject
	private LayoutConfigGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.kiml.config.text.ui.contentassist.antlr.internal.InternalLayoutConfigParser createParser() {
		de.cau.cs.kieler.kiml.config.text.ui.contentassist.antlr.internal.InternalLayoutConfigParser result = new de.cau.cs.kieler.kiml.config.text.ui.contentassist.antlr.internal.InternalLayoutConfigParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPropertyValueAccess().getAlternatives(), "rule__PropertyValue__Alternatives");
					put(grammarAccess.getFloatAccess().getAlternatives(), "rule__Float__Alternatives");
					put(grammarAccess.getKGraphElementAccess().getGroup(), "rule__KGraphElement__Group__0");
					put(grammarAccess.getKIdentifierAccess().getGroup(), "rule__KIdentifier__Group__0");
					put(grammarAccess.getKIdentifierAccess().getGroup_3(), "rule__KIdentifier__Group_3__0");
					put(grammarAccess.getPersistentEntryAccess().getGroup(), "rule__PersistentEntry__Group__0");
					put(grammarAccess.getQualifiedIDAccess().getGroup(), "rule__QualifiedID__Group__0");
					put(grammarAccess.getQualifiedIDAccess().getGroup_1(), "rule__QualifiedID__Group_1__0");
					put(grammarAccess.getKGraphElementAccess().getDataAssignment_1(), "rule__KGraphElement__DataAssignment_1");
					put(grammarAccess.getKIdentifierAccess().getIdAssignment_1(), "rule__KIdentifier__IdAssignment_1");
					put(grammarAccess.getKIdentifierAccess().getPersistentEntriesAssignment_3_0(), "rule__KIdentifier__PersistentEntriesAssignment_3_0");
					put(grammarAccess.getKIdentifierAccess().getPersistentEntriesAssignment_3_1(), "rule__KIdentifier__PersistentEntriesAssignment_3_1");
					put(grammarAccess.getPersistentEntryAccess().getKeyAssignment_0(), "rule__PersistentEntry__KeyAssignment_0");
					put(grammarAccess.getPersistentEntryAccess().getValueAssignment_2(), "rule__PersistentEntry__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.kiml.config.text.ui.contentassist.antlr.internal.InternalLayoutConfigParser typedParser = (de.cau.cs.kieler.kiml.config.text.ui.contentassist.antlr.internal.InternalLayoutConfigParser) parser;
			typedParser.entryRuleKGraphElement();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LayoutConfigGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LayoutConfigGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
