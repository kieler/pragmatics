/*
* generated by Xtext
*/
grammar InternalLayoutConfig;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.cau.cs.kieler.kiml.config.text.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.kiml.config.text.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.kieler.kiml.config.text.services.LayoutConfigGrammarAccess;

}

@parser::members {
 
 	private LayoutConfigGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LayoutConfigGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleKGraphElement
entryRuleKGraphElement 
:
{ before(grammarAccess.getKGraphElementRule()); }
	 ruleKGraphElement
{ after(grammarAccess.getKGraphElementRule()); } 
	 EOF 
;

// Rule KGraphElement
ruleKGraphElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKGraphElementAccess().getGroup()); }
(rule__KGraphElement__Group__0)
{ after(grammarAccess.getKGraphElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKIdentifier
entryRuleKIdentifier 
:
{ before(grammarAccess.getKIdentifierRule()); }
	 ruleKIdentifier
{ after(grammarAccess.getKIdentifierRule()); } 
	 EOF 
;

// Rule KIdentifier
ruleKIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKIdentifierAccess().getGroup()); }
(rule__KIdentifier__Group__0)
{ after(grammarAccess.getKIdentifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePersistentEntry
entryRulePersistentEntry 
:
{ before(grammarAccess.getPersistentEntryRule()); }
	 rulePersistentEntry
{ after(grammarAccess.getPersistentEntryRule()); } 
	 EOF 
;

// Rule PersistentEntry
rulePersistentEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPersistentEntryAccess().getGroup()); }
(rule__PersistentEntry__Group__0)
{ after(grammarAccess.getPersistentEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyValue
entryRulePropertyValue 
:
{ before(grammarAccess.getPropertyValueRule()); }
	 rulePropertyValue
{ after(grammarAccess.getPropertyValueRule()); } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyValueAccess().getAlternatives()); }
(rule__PropertyValue__Alternatives)
{ after(grammarAccess.getPropertyValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedID
entryRuleQualifiedID 
:
{ before(grammarAccess.getQualifiedIDRule()); }
	 ruleQualifiedID
{ after(grammarAccess.getQualifiedIDRule()); } 
	 EOF 
;

// Rule QualifiedID
ruleQualifiedID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedIDAccess().getGroup()); }
(rule__QualifiedID__Group__0)
{ after(grammarAccess.getQualifiedIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloat
entryRuleFloat 
:
{ before(grammarAccess.getFloatRule()); }
	 ruleFloat
{ after(grammarAccess.getFloatRule()); } 
	 EOF 
;

// Rule Float
ruleFloat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatAccess().getAlternatives()); }
(rule__Float__Alternatives)
{ after(grammarAccess.getFloatAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PropertyValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueAccess().getBOOLEANTerminalRuleCall_0()); }
	RULE_BOOLEAN
{ after(grammarAccess.getPropertyValueAccess().getBOOLEANTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPropertyValueAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getPropertyValueAccess().getSTRINGTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPropertyValueAccess().getFloatParserRuleCall_2()); }
	ruleFloat
{ after(grammarAccess.getPropertyValueAccess().getFloatParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPropertyValueAccess().getQualifiedIDParserRuleCall_3()); }
	ruleQualifiedID
{ after(grammarAccess.getPropertyValueAccess().getQualifiedIDParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getTFLOATTerminalRuleCall_0()); }
	RULE_TFLOAT
{ after(grammarAccess.getFloatAccess().getTFLOATTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFloatAccess().getNATURALTerminalRuleCall_1()); }
	RULE_NATURAL
{ after(grammarAccess.getFloatAccess().getNATURALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__KGraphElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KGraphElement__Group__0__Impl
	rule__KGraphElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KGraphElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKGraphElementAccess().getKNodeAction_0()); }
(

)
{ after(grammarAccess.getKGraphElementAccess().getKNodeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KGraphElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KGraphElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KGraphElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKGraphElementAccess().getDataAssignment_1()); }
(rule__KGraphElement__DataAssignment_1)*
{ after(grammarAccess.getKGraphElementAccess().getDataAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__KIdentifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KIdentifier__Group__0__Impl
	rule__KIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KIdentifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKIdentifierAccess().getKIdentifierAction_0()); }
(

)
{ after(grammarAccess.getKIdentifierAccess().getKIdentifierAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KIdentifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KIdentifier__Group__1__Impl
	rule__KIdentifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KIdentifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKIdentifierAccess().getIdAssignment_1()); }
(rule__KIdentifier__IdAssignment_1)
{ after(grammarAccess.getKIdentifierAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KIdentifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KIdentifier__Group__2__Impl
	rule__KIdentifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__KIdentifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKIdentifierAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getKIdentifierAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KIdentifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KIdentifier__Group__3__Impl
	rule__KIdentifier__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__KIdentifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKIdentifierAccess().getGroup_3()); }
(rule__KIdentifier__Group_3__0)?
{ after(grammarAccess.getKIdentifierAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KIdentifier__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KIdentifier__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KIdentifier__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKIdentifierAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getKIdentifierAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__KIdentifier__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KIdentifier__Group_3__0__Impl
	rule__KIdentifier__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KIdentifier__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKIdentifierAccess().getPersistentEntriesAssignment_3_0()); }
(rule__KIdentifier__PersistentEntriesAssignment_3_0)
{ after(grammarAccess.getKIdentifierAccess().getPersistentEntriesAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KIdentifier__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KIdentifier__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KIdentifier__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKIdentifierAccess().getPersistentEntriesAssignment_3_1()); }
(rule__KIdentifier__PersistentEntriesAssignment_3_1)*
{ after(grammarAccess.getKIdentifierAccess().getPersistentEntriesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PersistentEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PersistentEntry__Group__0__Impl
	rule__PersistentEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistentEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersistentEntryAccess().getKeyAssignment_0()); }
(rule__PersistentEntry__KeyAssignment_0)
{ after(grammarAccess.getPersistentEntryAccess().getKeyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PersistentEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PersistentEntry__Group__1__Impl
	rule__PersistentEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistentEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersistentEntryAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getPersistentEntryAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PersistentEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PersistentEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistentEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersistentEntryAccess().getValueAssignment_2()); }
(rule__PersistentEntry__ValueAssignment_2)
{ after(grammarAccess.getPersistentEntryAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group__0__Impl
	rule__QualifiedID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getGroup_1()); }
(rule__QualifiedID__Group_1__0)*
{ after(grammarAccess.getQualifiedIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group_1__0__Impl
	rule__QualifiedID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedIDAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__KGraphElement__DataAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKGraphElementAccess().getDataKIdentifierParserRuleCall_1_0()); }
	ruleKIdentifier{ after(grammarAccess.getKGraphElementAccess().getDataKIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KIdentifier__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKIdentifierAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getKIdentifierAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KIdentifier__PersistentEntriesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKIdentifierAccess().getPersistentEntriesPersistentEntryParserRuleCall_3_0_0()); }
	rulePersistentEntry{ after(grammarAccess.getKIdentifierAccess().getPersistentEntriesPersistentEntryParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KIdentifier__PersistentEntriesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKIdentifierAccess().getPersistentEntriesPersistentEntryParserRuleCall_3_1_0()); }
	rulePersistentEntry{ after(grammarAccess.getKIdentifierAccess().getPersistentEntriesPersistentEntryParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PersistentEntry__KeyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersistentEntryAccess().getKeyQualifiedIDParserRuleCall_0_0()); }
	ruleQualifiedID{ after(grammarAccess.getPersistentEntryAccess().getKeyQualifiedIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PersistentEntry__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersistentEntryAccess().getValuePropertyValueParserRuleCall_2_0()); }
	rulePropertyValue{ after(grammarAccess.getPersistentEntryAccess().getValuePropertyValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_TFLOAT : (('+'|'-') (('0'..'9')+ ('.' ('0'..'9')*)? (('e'|'E') ('+'|'-')? ('0'..'9')+)?|'.' ('0'..'9')+ (('e'|'E') ('+'|'-')? ('0'..'9')+)?)|('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)?|'.' ('0'..'9')+ (('e'|'E') ('+'|'-')? ('0'..'9')+)?|('0'..'9')+ ('e'|'E') ('+'|'-')? ('0'..'9')+);

RULE_NATURAL : ('0'..'9')+;

RULE_BOOLEAN : ('true'|'false');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


