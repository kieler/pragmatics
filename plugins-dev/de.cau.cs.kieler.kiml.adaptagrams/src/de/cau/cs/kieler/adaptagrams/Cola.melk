package de.cau.cs.kieler.kiml.adaptagrams

import de.cau.cs.kieler.adaptagrams.provider.ConstrainedLayoutProvider
import org.eclipse.elk.core.math.ElkPadding
import org.eclipse.elk.core.options.Direction

bundle {
    metadataClass properties.ColaMetaDataProvider  
    idPrefix de.cau.cs.kieler.cola
}

algorithm cola(ConstrainedLayoutProvider) {
	label "Constrained Layout"
	description 
	   "This method is based on a non-linear gradient projection technique. 
        Conceptually it&apos;s similar to a force directed method like Fruchterman-Reingold, 
        but using a more principled goal function and optimization techniques. "
	metadataClass properties.ColaOptions
	category org.eclipse.elk.force
	
	supports org.eclipse.elk.direction = Direction.UNDEFINED
	supports org.eclipse.elk.padding = new ElkPadding(10)
	supports org.eclipse.elk.spacing.nodeNode = 20
	
	supports avoidOverlaps
	supports adaptPortPositions
	supports considerPreviousPositions
	supports idealEdgeLength
}

//<layoutAlgorithm
//            category="de.cau.cs.kieler.adaptagrams.category"
//            class="de.cau.cs.kieler.adaptagrams.provider.ConstrainedLayoutProvider"
//            description=""
//            id="de.cau.cs.kieler.kiml.adaptagrams.constraintLayout"
//            name="Constrained Layout"
//            type="de.cau.cs.kieler.type.cola">

option idealEdgeLength: double {
    label "Ideal Edge Length"
    description "The ideal length of all edges."
    default = 100
    lowerBound = 0.0
    targets parents, edges
}

option avoidOverlaps: boolean {
    label "Avoid Overlaps"
    description "Causes non-overlap constraints to be generated for all rectangles, if it is set to true."
    default = true
    targets parents
}

option considerPreviousPositions: boolean {
    label "Consider Previous Node Positions"
    description "If activated, prior node positons are considered during the layout"
    default = false
    targets parents
}

option adaptPortPositions: boolean {
    label "Adapt Port Positions"
    description "Whether ports should be moved to the point where edges cross the node&apos;s bounds."
    default = false
    targets parents
}

//
//    /**
//     * Direction of the desired layout.
//     */
//    public static final IProperty<Boolean> DIRECTION_CONSTRAINTS = new Property<Boolean>(
//            "de.cau.cs.kieler.cola.useDirection", true);

//      
//      
//      <!-- - - - - - - - - - - - - - - - - - - - - - - - 
//                      Simple CoLa Provider 
//       - - - - - - - - - - - - - - - - - - - - - - - -->
//      <layoutAlgorithm
//            category="de.cau.cs.kieler.adaptagrams.category"
//            class="de.cau.cs.kieler.adaptagrams.provider.ConstrainedLayoutProvider"
//            id="de.cau.cs.kieler.kiml.adaptagrams.constraintLayout"
//            name="Constrained Layout"
//            type="de.cau.cs.kieler.type.cola">
//         </knownOption>
//      </layoutAlgorithm>