package de.cau.cs.kieler.kiml.adaptagrams

import de.cau.cs.kieler.adaptagrams.provider.SWIGLibavoidLayoutProvider
import org.eclipse.elk.core.options.EdgeRouting

bundle {
    metadataClass properties.AvoidMetaDataProvider  
    idPrefix de.cau.cs.kieler.avoid
}

algorithm cola(SWIGLibavoidLayoutProvider) {
    label "Libavoid Edge Routing"
    description 
       "libavoid is a cross-platform C++ library providing fast, object-avoiding orthogonal and polyline 
        connector routing for use in interactive diagram editors."
    metadataClass properties.AvoidOptions
    
    supports org.eclipse.elk.direction
    supports org.eclipse.elk.edgeRouting = EdgeRouting.ORTHOGONAL
    supports org.eclipse.elk.margins
        documentation "Margin of a (atomic) node, i.e. space to be preserved around a node."
    supports org.eclipse.elk.padding
        documentation "Padding of the parent node, i.e. restriction of the drawing area."
    supports org.eclipse.elk.portConstraints
    
}




//         
//      <!-- - - - - - - - - - - - - - - - - - - - - - - - 
//                          Libavoid 
//       - - - - - - - - - - - - - - - - - - - - - - - -->
//      <layoutAlgorithm
//            category="de.cau.cs.kieler.adaptagrams.category"
//            class="de.cau.cs.kieler.adaptagrams.provider.SWIGLibavoidLayoutProvider"
//            description=""
//            id="de.cau.cs.kieler.kiml.adaptagrams.libavoid"
//            name="Libavoid"
//            type="de.cau.cs.kieler.type.edgeRouting">
//         <knownOption
//               default="ORTHOGONAL"
//               option="de.cau.cs.kieler.edgeRouting">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.segmentPenalty">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.anglePenalty">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.crossingPenalty">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.clusterCrossingPenalty">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.fixedSharedPathPenalty">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.portDirectionPenalty">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.shapeBufferDistance">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.idealNudgingDistance">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.nudgeOrthogonalSegmentsConnectedToShapes">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.improveHyperedgeRoutesMovingJunctions">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.penaliseOrthogonalSharedPathsAtConnEnds">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.nudgeOrthogonalTouchingColinearSegments">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.direction">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.performUnifyingNudgingPreprocessingStep">
//         </knownOption>
//         <knownOption
//               option="de.cau.cs.kieler.libavoid.improveHyperedgeRoutesMovingAddingAndDeletingJunctions">
//         </knownOption>
//      </layoutAlgorithm>
//      
//      <!-- - - - - - - - - - - - - - - - - - - - - - - - 
//                      Libavoid's Options 
//       - - - - - - - - - - - - - - - - - - - - - - - -->
//      <layoutOption
//            advanced="false"
//            appliesTo="parents"
//            default="10.0"
//            description="This penalty is applied for each segment in the connector path beyond the first. This should always normally be set when doing orthogonal routing to prevent step-like connector paths."
//            id="de.cau.cs.kieler.libavoid.segmentPenalty"
//            lowerBound="0.0"
//            name="Segment Penalty"
//            type="float">
//      </layoutOption>
//      <layoutOption
//            advanced="false"
//            appliesTo="parents"
//            default="0.0"
//            description="This penalty is applied in its full amount to tight acute bends in the connector path. A smaller portion of the penalty is applied for slight bends, i.e., where the bend is close to 180 degrees. This is useful for polyline routing where there is some evidence that tighter corners are worse for readability, but that slight bends might not be so bad, especially when smoothed by curves. "
//            id="de.cau.cs.kieler.libavoid.anglePenalty"
//            lowerBound="0"
//            name="Angle Penalty"
//            type="float">
//      </layoutOption>
//      <layoutOption
//            advanced="true"
//            appliesTo="parents"
//            default="0"
//            description="This penalty is applied whenever a connector path crosses another connector path. It takes shared paths into consideration and the penalty is only applied if there is an actual crossing. "
//            id="de.cau.cs.kieler.libavoid.crossingPenalty"
//            lowerBound="0"
//            name="Crossing Penalty"
//            type="float">
//      </layoutOption>
//      <layoutOption
//            advanced="true"
//            appliesTo="parents"
//            default="4000.0"
//            description="This penalty is applied whenever a connector path crosses a cluster boundary. "
//            id="de.cau.cs.kieler.libavoid.clusterCrossingPenalty"
//            lowerBound="0"
//            name="Cluster Crossing Penalty"
//            type="float">
//      </layoutOption>
//      <layoutOption
//            advanced="true"
//            appliesTo="parents"
//            description="This penalty is applied whenever a connector path shares some segments with an immovable portion of an existing connector route (such as the first or last segment of a connector). "
//            id="de.cau.cs.kieler.libavoid.fixedSharedPathPenalty"
//            name="Fixed Shared Path Penalty"
//            type="float">
//      </layoutOption>
//      <layoutOption
//            advanced="true"
//            appliesTo="parents"
//            default="100.0"
//            description="This penalty is applied to port selection choice when the other end of the connector being routed does not appear in any of the 90 degree visibility cones centered on the visibility directions for the port. "
//            id="de.cau.cs.kieler.libavoid.portDirectionPenalty"
//            name="Port Direction Penalty"
//            type="float">
//      </layoutOption>
//      <layoutOption
//            advanced="false"
//            appliesTo="parents"
//            default="4"
//            description="This parameter defines the spacing distance that will be added to the sides of each shape when determining obstacle sizes for routing. This controls how closely connectors pass shapes, and can be used to prevent connectors overlapping with shape boundaries. By default, this distance is set to a value of 0. "
//            id="de.cau.cs.kieler.libavoid.shapeBufferDistance"
//            name="Shape Buffer Distance"
//            type="float">
//      </layoutOption>
//      <layoutOption
//            advanced="false"
//            appliesTo="parents"
//            default="4.0"
//            description="This parameter defines the spacing distance that will be used for nudging apart overlapping corners and line segments of connectors. By default, this distance is set to a value of 4. "
//            id="de.cau.cs.kieler.libavoid.idealNudgingDistance"
//            lowerBound="0.0"
//            name="Ideal Nudging Distance"
//            type="float">
//      </layoutOption>
//      <layoutOption
//            advanced="false"       
//            appliesTo="parents"
//            default="false"
//            description="This option causes the final segments of connectors, which are attached to shapes, to be nudged apart. Usually these segments are fixed, since they are considered to be attached to ports. This option is not set by default. "
//            id="de.cau.cs.kieler.libavoid.nudgeOrthogonalSegmentsConnectedToShapes"
//            name="Nudge Orthogonal Segments"
//            type="boolean">
//      </layoutOption>
//      <layoutOption
//            advanced="false"
//            appliesTo="parents"
//            default="true"
//            description="This option causes hyperedge routes to be locally improved fixing obviously bad paths. As part of this process libavoid will effectively move junctions, setting new ideal positions ( JunctionRef::recommendedPosition() ) for each junction. "
//            id="de.cau.cs.kieler.libavoid.improveHyperedgeRoutesMovingJunctions"
//            name="Improve Hyperedge Routes"
//            type="boolean">
//      </layoutOption>
//      <layoutOption
//            advanced="true"
//            appliesTo="parents"
//            default="false"
//            description="This option penalises and attempts to reroute orthogonal shared connector paths terminating at a common junction or shape connection pin. When multiple connector paths enter or leave the same side of a junction (or shape pin), the router will attempt to reroute these to different sides of the junction or different shape pins. This option depends on the fixedSharedPathPenalty penalty having been set. "
//            id="de.cau.cs.kieler.libavoid.penaliseOrthogonalSharedPathsAtConnEnds"
//            name="Penalise Orthogonal Shared Paths"
//            type="boolean">
//      </layoutOption>
//      <layoutOption
//            advanced="false"
//            appliesTo="parents"
//            default="false"
//            description="This option can be used to control whether colinear line segments that touch just at their ends will be nudged apart. The overlap will usually be resolved in the other dimension, so this is not usually required and is not set by default. "
//            id="de.cau.cs.kieler.libavoid.nudgeOrthogonalTouchingColinearSegments"
//            name="Nudge Orthogonal Colinear Segments"
//            type="boolean">
//      </layoutOption>
//      <layoutOption
//            advanced="true"
//            appliesTo="parents"
//            default="true"
//            description="This option can be used to control whether the router performs a preprocessing step before orthogonal nudging where is tries to unify segments and centre them in free space. This generally results in better quality ordering and nudging."
//            id="de.cau.cs.kieler.libavoid.performUnifyingNudgingPreprocessingStep"
//            name="Nudging Preprocessing"
//            type="boolean">
//      </layoutOption>
//      <layoutOption
//            advanced="true"
//            appliesTo="parents"
//            default="false"
//            description="This option causes hyperedge routes to be locally improved fixing obviously bad paths."
//            id="de.cau.cs.kieler.libavoid.improveHyperedgeRoutesMovingAddingAndDeletingJunctions"
//            name="Improve Hyperedge Routes Add Delete"
//            type="boolean">
//      </layoutOption>
