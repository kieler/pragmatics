/*
* generated by Xtext
*/
package de.cau.cs.kieler.kiml.grana.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class GranaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GranaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grana");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cGlobalResourcesKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cGlobalResourcesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cGlobalResourcesGlobalResourceRefParserRuleCall_0_1_0 = (RuleCall)cGlobalResourcesAssignment_0_1.eContents().get(0);
		private final Assignment cJobsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJobsJobParserRuleCall_1_0 = (RuleCall)cJobsAssignment_1.eContents().get(0);
		
		//Grana:
		//
		//	("globalResources" globalResources+=GlobalResourceRef*)? jobs+=Job+;
		public ParserRule getRule() { return rule; }

		//("globalResources" globalResources+=GlobalResourceRef*)? jobs+=Job+
		public Group getGroup() { return cGroup; }

		//("globalResources" globalResources+=GlobalResourceRef*)?
		public Group getGroup_0() { return cGroup_0; }

		//"globalResources"
		public Keyword getGlobalResourcesKeyword_0_0() { return cGlobalResourcesKeyword_0_0; }

		//globalResources+=GlobalResourceRef*
		public Assignment getGlobalResourcesAssignment_0_1() { return cGlobalResourcesAssignment_0_1; }

		//GlobalResourceRef
		public RuleCall getGlobalResourcesGlobalResourceRefParserRuleCall_0_1_0() { return cGlobalResourcesGlobalResourceRefParserRuleCall_0_1_0; }

		//jobs+=Job+
		public Assignment getJobsAssignment_1() { return cJobsAssignment_1; }

		//Job
		public RuleCall getJobsJobParserRuleCall_1_0() { return cJobsJobParserRuleCall_1_0; }
	}

	public class JobElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Job");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJobAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJobKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLayoutBeforeAnalysisAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cLayoutBeforeAnalysisLayoutBeforeAnalysisKeyword_3_0 = (Keyword)cLayoutBeforeAnalysisAssignment_3.eContents().get(0);
		private final Keyword cResourcesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cResourcesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResourcesResourceParserRuleCall_5_0 = (RuleCall)cResourcesAssignment_5.eContents().get(0);
		private final Keyword cLayoutoptionsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLayoutOptionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLayoutOptionsKIdentifierParserRuleCall_7_0 = (RuleCall)cLayoutOptionsAssignment_7.eContents().get(0);
		private final Keyword cAnalysesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAnalysesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnalysesAnalysisParserRuleCall_9_0 = (RuleCall)cAnalysesAssignment_9.eContents().get(0);
		private final Keyword cOutputKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cOutputAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOutputSTRINGTerminalRuleCall_11_0 = (RuleCall)cOutputAssignment_11.eContents().get(0);
		
		//Job:
		//
		//	{Job} "job" name=ID? layoutBeforeAnalysis?="layoutBeforeAnalysis"? "resources" resources+=Resource* "layoutoptions"
		//
		//	layoutOptions+=KIdentifier "analyses" analyses+=Analysis* "output" output=STRING;
		public ParserRule getRule() { return rule; }

		//{Job} "job" name=ID? layoutBeforeAnalysis?="layoutBeforeAnalysis"? "resources" resources+=Resource* "layoutoptions"
		//
		//layoutOptions+=KIdentifier "analyses" analyses+=Analysis* "output" output=STRING
		public Group getGroup() { return cGroup; }

		//{Job}
		public Action getJobAction_0() { return cJobAction_0; }

		//"job"
		public Keyword getJobKeyword_1() { return cJobKeyword_1; }

		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//layoutBeforeAnalysis?="layoutBeforeAnalysis"?
		public Assignment getLayoutBeforeAnalysisAssignment_3() { return cLayoutBeforeAnalysisAssignment_3; }

		//"layoutBeforeAnalysis"
		public Keyword getLayoutBeforeAnalysisLayoutBeforeAnalysisKeyword_3_0() { return cLayoutBeforeAnalysisLayoutBeforeAnalysisKeyword_3_0; }

		//"resources"
		public Keyword getResourcesKeyword_4() { return cResourcesKeyword_4; }

		//resources+=Resource*
		public Assignment getResourcesAssignment_5() { return cResourcesAssignment_5; }

		//Resource
		public RuleCall getResourcesResourceParserRuleCall_5_0() { return cResourcesResourceParserRuleCall_5_0; }

		//"layoutoptions"
		public Keyword getLayoutoptionsKeyword_6() { return cLayoutoptionsKeyword_6; }

		//layoutOptions+=KIdentifier
		public Assignment getLayoutOptionsAssignment_7() { return cLayoutOptionsAssignment_7; }

		//KIdentifier
		public RuleCall getLayoutOptionsKIdentifierParserRuleCall_7_0() { return cLayoutOptionsKIdentifierParserRuleCall_7_0; }

		//"analyses"
		public Keyword getAnalysesKeyword_8() { return cAnalysesKeyword_8; }

		//analyses+=Analysis*
		public Assignment getAnalysesAssignment_9() { return cAnalysesAssignment_9; }

		//Analysis
		public RuleCall getAnalysesAnalysisParserRuleCall_9_0() { return cAnalysesAnalysisParserRuleCall_9_0; }

		//"output"
		public Keyword getOutputKeyword_10() { return cOutputKeyword_10; }

		//output=STRING
		public Assignment getOutputAssignment_11() { return cOutputAssignment_11; }

		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_11_0() { return cOutputSTRINGTerminalRuleCall_11_0; }
	}

	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourceReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalResourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Resource:
		//
		//	ResourceReference | LocalResource;
		public ParserRule getRule() { return rule; }

		//ResourceReference | LocalResource
		public Alternatives getAlternatives() { return cAlternatives; }

		//ResourceReference
		public RuleCall getResourceReferenceParserRuleCall_0() { return cResourceReferenceParserRuleCall_0; }

		//LocalResource
		public RuleCall getLocalResourceParserRuleCall_1() { return cLocalResourceParserRuleCall_1; }
	}

	public class ResourceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceRefsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceRefsGlobalResourceRefCrossReference_1_0 = (CrossReference)cResourceRefsAssignment_1.eContents().get(0);
		private final RuleCall cResourceRefsGlobalResourceRefIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceRefsGlobalResourceRefCrossReference_1_0.eContents().get(1);
		
		//ResourceReference:
		//
		//	"ref" resourceRefs+=[GlobalResourceRef]+;
		public ParserRule getRule() { return rule; }

		//"ref" resourceRefs+=[GlobalResourceRef]+
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//resourceRefs+=[GlobalResourceRef]+
		public Assignment getResourceRefsAssignment_1() { return cResourceRefsAssignment_1; }

		//[GlobalResourceRef]
		public CrossReference getResourceRefsGlobalResourceRefCrossReference_1_0() { return cResourceRefsGlobalResourceRefCrossReference_1_0; }

		//ID
		public RuleCall getResourceRefsGlobalResourceRefIDTerminalRuleCall_1_0_1() { return cResourceRefsGlobalResourceRefIDTerminalRuleCall_1_0_1; }
	}

	public class GlobalResourceRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalResourceRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResourcesLocalResourceParserRuleCall_1_0 = (RuleCall)cResourcesAssignment_1.eContents().get(0);
		
		//GlobalResourceRef:
		//
		//	name=ID resources+=LocalResource;
		public ParserRule getRule() { return rule; }

		//name=ID resources+=LocalResource
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//resources+=LocalResource
		public Assignment getResourcesAssignment_1() { return cResourcesAssignment_1; }

		//LocalResource
		public RuleCall getResourcesLocalResourceParserRuleCall_1_0() { return cResourcesLocalResourceParserRuleCall_1_0; }
	}

	public class LocalResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathSTRINGTerminalRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFilterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFilterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilterSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cFilterAssignment_1_1.eContents().get(0);
		
		//LocalResource:
		//
		//	path=STRING ("filter" filter=STRING);
		public ParserRule getRule() { return rule; }

		//path=STRING ("filter" filter=STRING)
		public Group getGroup() { return cGroup; }

		//path=STRING
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_0_0() { return cPathSTRINGTerminalRuleCall_0_0; }

		//"filter" filter=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"filter"
		public Keyword getFilterKeyword_1_0() { return cFilterKeyword_1_0; }

		//filter=STRING
		public Assignment getFilterAssignment_1_1() { return cFilterAssignment_1_1; }

		//STRING
		public RuleCall getFilterSTRINGTerminalRuleCall_1_1_0() { return cFilterSTRINGTerminalRuleCall_1_1_0; }
	}

	public class AnalysisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Analysis");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Analysis:
		//
		//	name=QualifiedID;
		public ParserRule getRule() { return rule; }

		//name=QualifiedID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedID
		public RuleCall getNameQualifiedIDParserRuleCall_0() { return cNameQualifiedIDParserRuleCall_0; }
	}

	public class KIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPersistentEntriesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPersistentEntriesPersistentEntryParserRuleCall_3_0_0 = (RuleCall)cPersistentEntriesAssignment_3_0.eContents().get(0);
		private final Assignment cPersistentEntriesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPersistentEntriesPersistentEntryParserRuleCall_3_1_0 = (RuleCall)cPersistentEntriesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//KIdentifier:
		//
		//	{KIdentifier} id=ID "{" (persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)? "}";
		public ParserRule getRule() { return rule; }

		//{KIdentifier} id=ID "{" (persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)? "}"
		public Group getGroup() { return cGroup; }

		//{KIdentifier}
		public Action getKIdentifierAction_0() { return cKIdentifierAction_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)?
		public Group getGroup_3() { return cGroup_3; }

		//persistentEntries+=PersistentEntry
		public Assignment getPersistentEntriesAssignment_3_0() { return cPersistentEntriesAssignment_3_0; }

		//PersistentEntry
		public RuleCall getPersistentEntriesPersistentEntryParserRuleCall_3_0_0() { return cPersistentEntriesPersistentEntryParserRuleCall_3_0_0; }

		//persistentEntries+=PersistentEntry*
		public Assignment getPersistentEntriesAssignment_3_1() { return cPersistentEntriesAssignment_3_1; }

		//PersistentEntry
		public RuleCall getPersistentEntriesPersistentEntryParserRuleCall_3_1_0() { return cPersistentEntriesPersistentEntryParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PersistentEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PersistentEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyQualifiedIDParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePropertyValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PersistentEntry:
		//
		//	key=QualifiedID ":" value=PropertyValue;
		public ParserRule getRule() { return rule; }

		//key=QualifiedID ":" value=PropertyValue
		public Group getGroup() { return cGroup; }

		//key=QualifiedID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//QualifiedID
		public RuleCall getKeyQualifiedIDParserRuleCall_0_0() { return cKeyQualifiedIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=PropertyValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//PropertyValue
		public RuleCall getValuePropertyValueParserRuleCall_2_0() { return cValuePropertyValueParserRuleCall_2_0; }
	}

	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedID returns ecore::EString:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLEANTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQualifiedIDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PropertyValue returns ecore::EString:
		//
		//	BOOLEAN | STRING | Float | QualifiedID;
		public ParserRule getRule() { return rule; }

		//BOOLEAN | STRING | Float | QualifiedID
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_0() { return cBOOLEANTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//Float
		public RuleCall getFloatParserRuleCall_2() { return cFloatParserRuleCall_2; }

		//QualifiedID
		public RuleCall getQualifiedIDParserRuleCall_3() { return cQualifiedIDParserRuleCall_3; }
	}

	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Float");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTFLOATTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNATURALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Float returns ecore::EFloat:
		//
		//	TFLOAT | NATURAL;
		public ParserRule getRule() { return rule; }

		//TFLOAT | NATURAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//TFLOAT
		public RuleCall getTFLOATTerminalRuleCall_0() { return cTFLOATTerminalRuleCall_0; }

		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_1() { return cNATURALTerminalRuleCall_1; }
	}
	
	
	private GranaElements pGrana;
	private JobElements pJob;
	private ResourceElements pResource;
	private ResourceReferenceElements pResourceReference;
	private GlobalResourceRefElements pGlobalResourceRef;
	private LocalResourceElements pLocalResource;
	private AnalysisElements pAnalysis;
	private KIdentifierElements pKIdentifier;
	private PersistentEntryElements pPersistentEntry;
	private QualifiedIDElements pQualifiedID;
	private PropertyValueElements pPropertyValue;
	private FloatElements pFloat;
	private TerminalRule tTFLOAT;
	private TerminalRule tNATURAL;
	private TerminalRule tBOOLEAN;
	private TerminalRule tSTRING;
	private TerminalRule tID;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public GranaGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.kiml.grana.text.Grana".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Grana:
	//
	//	("globalResources" globalResources+=GlobalResourceRef*)? jobs+=Job+;
	public GranaElements getGranaAccess() {
		return (pGrana != null) ? pGrana : (pGrana = new GranaElements());
	}
	
	public ParserRule getGranaRule() {
		return getGranaAccess().getRule();
	}

	//Job:
	//
	//	{Job} "job" name=ID? layoutBeforeAnalysis?="layoutBeforeAnalysis"? "resources" resources+=Resource* "layoutoptions"
	//
	//	layoutOptions+=KIdentifier "analyses" analyses+=Analysis* "output" output=STRING;
	public JobElements getJobAccess() {
		return (pJob != null) ? pJob : (pJob = new JobElements());
	}
	
	public ParserRule getJobRule() {
		return getJobAccess().getRule();
	}

	//Resource:
	//
	//	ResourceReference | LocalResource;
	public ResourceElements getResourceAccess() {
		return (pResource != null) ? pResource : (pResource = new ResourceElements());
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}

	//ResourceReference:
	//
	//	"ref" resourceRefs+=[GlobalResourceRef]+;
	public ResourceReferenceElements getResourceReferenceAccess() {
		return (pResourceReference != null) ? pResourceReference : (pResourceReference = new ResourceReferenceElements());
	}
	
	public ParserRule getResourceReferenceRule() {
		return getResourceReferenceAccess().getRule();
	}

	//GlobalResourceRef:
	//
	//	name=ID resources+=LocalResource;
	public GlobalResourceRefElements getGlobalResourceRefAccess() {
		return (pGlobalResourceRef != null) ? pGlobalResourceRef : (pGlobalResourceRef = new GlobalResourceRefElements());
	}
	
	public ParserRule getGlobalResourceRefRule() {
		return getGlobalResourceRefAccess().getRule();
	}

	//LocalResource:
	//
	//	path=STRING ("filter" filter=STRING);
	public LocalResourceElements getLocalResourceAccess() {
		return (pLocalResource != null) ? pLocalResource : (pLocalResource = new LocalResourceElements());
	}
	
	public ParserRule getLocalResourceRule() {
		return getLocalResourceAccess().getRule();
	}

	//Analysis:
	//
	//	name=QualifiedID;
	public AnalysisElements getAnalysisAccess() {
		return (pAnalysis != null) ? pAnalysis : (pAnalysis = new AnalysisElements());
	}
	
	public ParserRule getAnalysisRule() {
		return getAnalysisAccess().getRule();
	}

	//KIdentifier:
	//
	//	{KIdentifier} id=ID "{" (persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)? "}";
	public KIdentifierElements getKIdentifierAccess() {
		return (pKIdentifier != null) ? pKIdentifier : (pKIdentifier = new KIdentifierElements());
	}
	
	public ParserRule getKIdentifierRule() {
		return getKIdentifierAccess().getRule();
	}

	//PersistentEntry:
	//
	//	key=QualifiedID ":" value=PropertyValue;
	public PersistentEntryElements getPersistentEntryAccess() {
		return (pPersistentEntry != null) ? pPersistentEntry : (pPersistentEntry = new PersistentEntryElements());
	}
	
	public ParserRule getPersistentEntryRule() {
		return getPersistentEntryAccess().getRule();
	}

	//QualifiedID returns ecore::EString:
	//
	//	ID ("." ID)*;
	public QualifiedIDElements getQualifiedIDAccess() {
		return (pQualifiedID != null) ? pQualifiedID : (pQualifiedID = new QualifiedIDElements());
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//PropertyValue returns ecore::EString:
	//
	//	BOOLEAN | STRING | Float | QualifiedID;
	public PropertyValueElements getPropertyValueAccess() {
		return (pPropertyValue != null) ? pPropertyValue : (pPropertyValue = new PropertyValueElements());
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//Float returns ecore::EFloat:
	//
	//	TFLOAT | NATURAL;
	public FloatElements getFloatAccess() {
		return (pFloat != null) ? pFloat : (pFloat = new FloatElements());
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}

	/// * Terminals * / terminal TFLOAT returns ecore::EFloat:
	//
	//	("+" | "-") ("0".."9"+ ("." "0".."9"*)? (("e" | "E") ("+" | "-")? "0".."9"+)? | "." "0".."9"+ (("e" | "E") ("+" |
	//
	//	"-")? "0".."9"+)?) | "0".."9"+ "." "0".."9"* (("e" | "E") ("+" | "-")? "0".."9"+)? | "." "0".."9"+ (("e" | "E") ("+"
	//
	//	| "-")? "0".."9"+)? | "0".."9"+ ("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getTFLOATRule() {
		return (tTFLOAT != null) ? tTFLOAT : (tTFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TFLOAT"));
	} 

	//terminal NATURAL returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getNATURALRule() {
		return (tNATURAL != null) ? tNATURAL : (tNATURAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NATURAL"));
	} 

	//terminal BOOLEAN returns ecore::EBoolean:
	//
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal STRING: // chsch: added '\'' alternative! 
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ID: // chsch: the optional leading '^' is the implicit keyword escape character
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
