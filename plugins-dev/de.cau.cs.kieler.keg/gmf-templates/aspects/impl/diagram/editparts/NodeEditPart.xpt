/*
 * Copyright (c) 2006, 2010 Borland Software Corporation and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::editparts::Utils»
«EXTENSION xpt::diagram::Utils»

«DEFINE extendsListContents FOR gmfgen::GenNode-»
«IF editPartClassName <> 'Node2EditPart' and editPartClassName <> 'Node4EditPart'-»
	«IF hasBorderItems(self)»org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderedShapeEditPart«ELSE»org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart«ENDIF-»
«ELSE-»
	«IF hasBorderItems(self)»de.cau.cs.kieler.karma.AdvancedRenderingBorderedShapeEditPart«ELSE»de.cau.cs.kieler.karma.AdvancedRenderingShapeNodeEditPart«ENDIF-»	
«ENDIF-»
«ENDDEFINE»

«DEFINE createNodeShape(node : gmfgen::GenNode) FOR gmfgen::FigureViewmap-»
	«LET (if figureQualifiedClassName = null then 'org.eclipse.draw2d.RectangleFigure' else figureQualifiedClassName endif) AS fqn-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.draw2d.IFigure createNodeShape() {
			primaryShape = new «fqn»()«IF node.childNodes->notEmpty() and node.getLayoutType() = gmfgen::ViewmapLayoutType::XY_LAYOUT»«EXPAND forceUseLocalCoordinates»«ENDIF»;
			return primaryShape; 
		}

		«EXPAND getPrimaryShapeMethod FOR fqn-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE createNodeShape(node : gmfgen::GenNode) FOR gmfgen::SnippetViewmap-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return «body»;
	}
«ENDDEFINE»

«DEFINE createNodeShape(node : gmfgen::GenNode) FOR gmfgen::InnerClassViewmap-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		primaryShape = new «className»()«IF node.childNodes->notEmpty() and node.getLayoutType() = gmfgen::ViewmapLayoutType::XY_LAYOUT»«EXPAND forceUseLocalCoordinates»«ENDIF»;
		return primaryShape;
	}

	«EXPAND getPrimaryShapeMethod FOR className-»
«ENDDEFINE»

«DEFINE forceUseLocalCoordinates FOR OclAny-»
{
	protected boolean useLocalCoordinates() {
		return true;
	}
}«-»
«ENDDEFINE»

«DEFINE getPrimaryShapeMethod FOR String-»
	«EXPAND xpt::Common::generatedMemberComment»
	public «self» getPrimaryShape() {
		return («self») primaryShape;
	}
«ENDDEFINE»

«DEFINE addBorderItem FOR gmfgen::GenNode-»
    «IF getExternalLabels(self)->size() > 0-»
        «EXPAND xpt::Common::generatedMemberComment»
        protected void addBorderItem(org.eclipse.draw2d.IFigure borderItemContainer, org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart borderItemEditPart) {
            if («FOREACH getExternalLabels(self) AS label SEPARATOR ' || '»borderItemEditPart instanceof «label.getEditPartQualifiedClassName()»«ENDFOREACH») {
«REM» * exchanged default label locator and set smaller default offset
      * overridden method for ports locator in order to allow ports to cover the node label
«ENDREM»
                de.cau.cs.kieler.core.model.gmf.figures.layout.LabelLocator locator = new de.cau.cs.kieler.core.model.gmf.figures.layout.LabelLocator(getMainFigure(), org.eclipse.draw2d.PositionConstants.SOUTH);
                «IF self.getDomainMetaClass().ecoreClass.name = 'Port'-»
                    locator.setPortBehavior(true);
                    locator.setBorderItemOffset(new org.eclipse.draw2d.geometry.Dimension(-2, -2));
                «ELSE-»
                    locator.setBorderItemOffset(new org.eclipse.draw2d.geometry.Dimension(-4, -4));
                «ENDIF-»
                borderItemContainer.add(borderItemEditPart.getFigure(), locator);
            } else {
                    borderItemContainer.add(borderItemEditPart.getFigure(),
                            new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(getMainFigure()));
            }
«REM» end of changes «ENDREM»
        }
    «ENDIF-»
«ENDDEFINE»

«REM»Changed default size of 40 to 20«ENDREM»
«DEFINE createNodePlate FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		«IF editPartClassName = 'Node2EditPart' or editPartClassName = 'Node4EditPart'-»
		de.cau.cs.kieler.core.model.gmf.figures.RoundedRectangleFigure result = new de.cau.cs.kieler.core.model.gmf.figures.RoundedRectangleFigure();
		result.setCornerDimensions(new org.eclipse.draw2d.geometry.Dimension(40, 40));
		«ELSEIF editPartClassName = 'Node3EditPart' or editPartClassName = 'Node5EditPart'-»
		org.eclipse.gmf.runtime.gef.ui.internal.figures.OvalFigure result = new org.eclipse.gmf.runtime.gef.ui.internal.figures.OvalFigure() {
            @Override
            public org.eclipse.draw2d.geometry.Dimension getPreferredSize(int wHint, int hHint) {
                return new org.eclipse.draw2d.geometry.Dimension(20, 20);
            }

            @Override
            public void paintFigure(org.eclipse.draw2d.Graphics graphics) {
                // this code is copied from the base classes because the
                // implementation of the OvalFigure had to be skipped
                if (isOpaque() && getBorder() != null) {
                    org.eclipse.draw2d.geometry.Rectangle tempRect = new org.eclipse.draw2d.geometry.Rectangle(getBounds());
                    tempRect.crop(getBorder().getInsets(this));
                    graphics.fillRectangle(tempRect);
                    return;
                }
                if (isOpaque())
                    graphics.fillRectangle(getBounds());
                if (getBorder() instanceof org.eclipse.draw2d.AbstractBackground)
                    ((org.eclipse.draw2d.AbstractBackground) getBorder()).paintBackground(this,
                            graphics, NO_INSETS);
            }
        };
		«ELSE-»
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result = new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(«IF getDiagram().isPixelMapMode()»«defaultSizeWidth(viewmap, 20)», «defaultSizeHeight(viewmap, 20)»«ELSE»getMapMode().DPtoLP(«defaultSizeWidth(viewmap, 20)»), getMapMode().DPtoLP(«defaultSizeHeight(viewmap, 20)»)«ENDIF»);
        «ENDIF»
        «EXPAND setupNodePlate-»
        return result;
	}
«ENDDEFINE»

«DEFINE setupNodePlate FOR gmfgen::GenNode»«ENDDEFINE»

«DEFINE setupNodePlate FOR gmfgen::GenChildSideAffixedNode»
	//FIXME: workaround for #154536
	result.getBounds().setSize(result.getPreferredSize());
«ENDDEFINE»

«DEFINE createFigure FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment(
		'Creates figure for this edit part.\n' + 
		'\n' + 
		'Body of this method does not depend on settings in generation model\n' + 
		'so you may safely remove <i>generated</i> tag and modify it.\n'
	)»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure create«IF hasBorderItems(self)»Main«ELSE»Node«ENDIF»Figure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		«IF editPartClassName = 'PortEditPart'-»
		// set color
        org.eclipse.swt.graphics.RGB rgb =
                org.eclipse.jface.preference.PreferenceConverter.getColor(de.cau.cs.kieler.keg.diagram.part.GraphsDiagramEditorPlugin.getInstance()
                        .getPreferenceStore(), org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants.PREF_LINE_COLOR);
        org.eclipse.swt.graphics.Color fgColor = new org.eclipse.swt.graphics.Color(null, rgb);
        rgb =
                org.eclipse.jface.preference.PreferenceConverter.getColor(de.cau.cs.kieler.keg.diagram.part.GraphsDiagramEditorPlugin.getInstance()
                        .getPreferenceStore(), org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants.PREF_FILL_COLOR);
        org.eclipse.swt.graphics.Color bgColor = new org.eclipse.swt.graphics.Color(null, rgb);
        primaryShape.setForegroundColor(fgColor);
        primaryShape.setBackgroundColor(bgColor);
		«ENDIF»
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
«ENDDEFINE»

