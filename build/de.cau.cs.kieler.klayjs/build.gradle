def helpMsg = """
Gradle script for building Klay JavaScript version.

Requirements
============

Task 'getGWT' has to be called explicitly as dependency resolving won't work properly
with imported ant-tasks.

Build and test all
==================
./gradlew getGWT all

Build complete nightlies
========================
./gradlew clean getGWT buildall

Run all tests
=============
./gradlew clean getGWT testAll

Available tasks
===============
./gradlew tasks
Relevant tasks are grouped in 'KIELER {build|test|misc} tasks'.

Extra parameters via properties-file and/or cmd-line parameter
==============================================================
~/.gradle/gradle.properties:
----------------------------
org.gradle.daemon=false

cli:
----
./gradlew -Dorg.gradle.daemon=false -D...=... <tasks>
"""

apply plugin: 'base'

repositories {
    mavenCentral()
    maven {
      url "https://oss.sonatype.org/content/repositories/google-snapshots/"
    }
}

configurations {
    junitAnt
    gwt
}

dependencies {
    junitAnt 'junit:junit:4.8.2'
    junitAnt('org.apache.ant:ant-junit:1.9.2') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.9.2') {
        transitive = false
    }
    gwt 'com.google.guava:guava:18.0+'
    gwt 'com.google.guava:guava-gwt:18.0+'
    gwt('com.google.gwt:gwt:2.8+'){ changing = true }
    gwt('com.google.gwt:gwt-dev:2.8+'){ changing = true }
    gwt('com.google.gwt:gwt-user:2.8+'){ changing = true }
    gwt('com.google.gwt:gwt-servlet:2.8+'){ changing = true }
}

// Importing ant build.xml
// --------------------------------------------------------

ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask', classpath: configurations.junitAnt.asPath)
if (System.getenv()['GWT_SDK'] == null) {
    ext.gwt_sdk = "$buildDir/gwt/"
    ant.properties['system.GWT_SDK'] = "$buildDir/gwt/"
} else {
    ext.gwt_sdk = System.getenv()['GWT_SDK']
}
ant.importBuild 'build.xml'

clean.group 'KIELER build'
clean.description 'Deletes the target directory with all of its contents.'
copySrc.group 'KIELER build'
copySrc.description "Copies klay's java sources from the main repository."
dist.group 'KIELER build'
dist.description 'Compiles and bundles the klay layered algortihm as js.'
buildall.group 'KIELER build'
buildall.description 'Clean and dist.'

// gwt download
// --------------------------------------------------------

task getGWT(type: Copy) {
    from configurations.gwt
    into "$buildDir/gwt"
    outputs.files fileTree(dir: "$buildDir/gwt")
    // rename 'gwt(-.*)?-[0-9]+.[0-9]+.[0-9]+(-SNAPSHOT)?.jar', 'gwt$1.jar'
}
clean.dependsOn cleanGetGWT
// TODO it seems that this task-dependency doesn't work.
javac.dependsOn(getGWT)

// Convenience tasks
// --------------------------------------------------------

// Explicitly set task order to prevent the clean task from running after any build task.
getGWT.mustRunAfter clean
buildall.mustRunAfter clean

// TBD when migrating ant to gradle
// task buildAll(dependsOn: []) {
//     group 'KIELER build'
//     description 'Bundle and/or gather all artifacts.'
// }
task testAll(dependsOn: [':test/java:test', ':test/js:testBrowser', ':test/js:testNodejs', ':test/js:testWebworker']) {
    group 'KIELER test'
    description 'Run all tests.'
}
task all(dependsOn: [clean, buildall, testAll]) {
    group 'KIELER build'
    description 'Clean, build and test all.'
}

help.doLast {
    println helpMsg
}

// Utilities
// --------------------------------------------------------

task runSuperDevMode(type:Exec, dependsOn: [javac, getGWT]) {
    group 'KIELER misc'
    description 'Starts the SuperDevMode code server.'

    workingDir '.'
    executable 'java'
    args = [
        "-cp",
        [ // windows and unix require different path separators
         "$gwt_sdk/*",
         "src",
         "src-external"].join(File.pathSeparator),
        "com.google.gwt.dev.DevMode",
        "-war",
        "war",
        "-startupUrl",
        "KlayJsExample.html",
        "de.cau.cs.kieler.klay.gwt.KlayGWT"
    ]
}

// Extra args to execute stuff on windows

def isWindows = System.properties['os.name'].toLowerCase().contains('windows');

tasks.withType(Exec){task ->
    if (isWindows) {
        task.args = ['/c', task.executable] + task.args
        task.executable = 'cmd'
    }
}
