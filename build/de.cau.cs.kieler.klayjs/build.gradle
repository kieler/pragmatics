def helpMsg = """
Gradle script for building Klay JavaScript version.

Requirements
============

environment variables
---------------------
GWT_SDK=/path/to/gwt-sdk

software (for running the tests)
--------------------------------
nodejs
    https://nodejs.org/download/
.NET Framework Software Development Kit (SDK) version 2.0
    http://www.microsoft.com/en-us/download/details.aspx?id=19988

Build and test all
==================
./gradlew all

Build complete nightlies
========================
./gradlew clean buildall

Run all tests
=============
./gradlew clean testAll

Available tasks
===============
./gradlew tasks
Relevant tasks are grouped in 'KIELER {build|test|misc} tasks'.

Extra parameters via properties-file and/or cmd-line parameter
==============================================================
~/.gradle/gradle.properties:
----------------------------
org.gradle.daemon=false

cli:
----
./gradlew -Dorg.gradle.daemon=false -D...=... <tasks>
"""

repositories {
    mavenCentral()
}

configurations {
    junitAnt
}

dependencies {
    junitAnt 'junit:junit:4.8.2'
    junitAnt('org.apache.ant:ant-junit:1.9.2') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.9.2') {
        transitive = false
    }
}

// Importing ant build.xml
// --------------------------------------------------------

ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask', classpath: configurations.junitAnt.asPath)
ant.importBuild 'build.xml'

clean.group 'KIELER build'
clean.description 'Deletes the target directory with all of its contents.'
copySrc.group 'KIELER build'
copySrc.description "Copies klay's java sources from the main repository."
dist.group 'KIELER build'
dist.description 'Compiles and bundles the klay layered algortihm as js.'
buildall.group 'KIELER build'
buildall.description 'Clean and dist.'


// Prepare testing
// --------------------------------------------------------

task npmInstall(type: Exec) {
    description 'Installs all required nodejs modules.'
    workingDir 'test/js'
    executable 'npm'
    args 'install'
}

task unzipKlayJs(type: Copy, dependsOn: plainjslinker) {
    description 'Extracts the latest KlayJs build for testing.'
    from zipTree('target/klay_layered_js_plainjslinker_nightly_latest.zip')
    include 'klay.js'
    into 'test/js/src'
}

// Testing
// --------------------------------------------------------

task testBrowser(type: Exec, dependsOn: [npmInstall, unzipKlayJs]) {
    group 'KIELER test'
    description 'Tests KlayJs via plain javascript loading inside an html file.'
    workingDir 'test/js'
    executable 'npm'
    args = ['test']
}

task testNodejs(type: Exec, dependsOn: [npmInstall, unzipKlayJs]) {
    group 'KIELER test'
    description 'Tests KlayJs via nodejs.'
    workingDir 'test/js'
    executable 'node'
    args = ['src/nodejs/run_tests.js']
}

task testWebworker(type: Exec, dependsOn: [npmInstall, unzipKlayJs]) {
    group 'KIELER test'
    description 'Tests KlayJs via webworker.'
    workingDir 'test/js'
    executable 'node'
    args = ['src/webworker/run_tests.js']
}

// Cleanup
// --------------------------------------------------------

task cleanJs(type: Delete) {
    group 'KIELER build'
    description 'Deletes build directories and installed modules.'
    delete 'build'
    delete 'test/js/node_modules'
    delete 'test/js/build'
    delete 'test/js/src/klay.js'
}
clean.dependsOn cleanJs

// Utilities
// --------------------------------------------------------

task runSuperDevMode(type:Exec, dependsOn: javac) {
    group 'KIELER misc'
    description 'Starts the SuperDevMode code server.'
    def gwt = System.getenv('GWT_SDK')

    workingDir '.'
    executable 'java'
    args = [
        "-cp",
        [ // windows and unix require different path separators
         "$gwt/gwt-dev.jar",
         "$gwt/*",
         "war/WEB-INF/lib/*",
         "src",
         "src-external"].join(File.pathSeparator),
        "com.google.gwt.dev.DevMode",
        "-war",
        "war",
        "-startupUrl",
        "KlayJsExample.html",
        "de.cau.cs.kieler.klay.gwt.KlayGWT"
    ]

    doFirst {
        // run check only when task is actually executed
        if (!gwt) {
            throw new InvalidUserDataException("No GWT_SDK was specified!")
        }
    }
}


// Convenience tasks
// --------------------------------------------------------

// Explicitly set task order to prevent the clean task from running after any build task.
testBrowser.mustRunAfter cleanJs
testNodejs.mustRunAfter cleanJs
testWebworker.mustRunAfter cleanJs
buildall.mustRunAfter clean

// TBD when migrating ant to gradle
// task buildAll(dependsOn: []) {
//     group 'KIELER build'
//     description 'Bundle and/or gather all artifacts.'
// }
task testAll(dependsOn: [test, testBrowser, testNodejs, testWebworker]) {
    group 'KIELER test'
    description 'Run all tests.'
}
task all(dependsOn: [clean, cleanJs, buildall, testAll]) {
    group 'KIELER build'
    description 'Clean, build and test all.'
}

help.doLast {
    println helpMsg
}

// Extra args to execute stuff on windows

def isWindows = System.properties['os.name'].toLowerCase().contains('windows');

tasks.withType(Exec){task ->
    if (isWindows) {
        task.args = ['/c', task.executable] + task.args
        task.executable = 'cmd'
    }
}
