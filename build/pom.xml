<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>de.cau.cs.kieler</groupId>
  <artifactId>parent</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>


  <!-- Define a few properties used throughout all build profiles. -->
  <properties>
    <tycho-version>0.21.0</tycho-version>
    <targetJdk>1.8</targetJdk>
    <xtext-version>2.16.0</xtext-version>
    <elk-version>0.5.0</elk-version>

    <!-- chsch: copied from https://eclipse.googlesource.com/recommenders/org.eclipse.recommenders/+/3dae4575d3370da2da25a1cbce3dfcff198f0611/features/pom.xml -->
    <!-- Non-breakable space, as normal spaces are trimmed. -->
    <sourceFeatureLabelSuffix>&#xA0;(Sources)</sourceFeatureLabelSuffix>

    <!-- guarantee that we use utf8 for compilation, this is especially required
         due to xtend's template symbols (Â«) when running maven on windows. -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.build.resourceEncoding>UTF-8</project.build.resourceEncoding>
    <maven.compiler.encoding>UTF-8</maven.compiler.encoding>

    <!-- definitions of our repositories -->
    <kieler.pragmatics.nightly>
      http://rtsys.informatik.uni-kiel.de/~kieler/updatesite/nightly/pragmatics/
    </kieler.pragmatics.nightly>
  </properties>

  <!-- Define one profile for each output target we have.
       Formerly, we had the <repository> definitions repeated below in each profile
       globally defined, i.e. profile independent. This, however, prevents the
       Stuttgart/India guys from relying on our build infrastructure as it is
       (they don't want and cannot rely on our target platform repos) and would
       require customization, which may lead to merge conflicts due updates in our
       config and further hassles... -->
  <profiles>

    <!-- The Pragmatics update site. -->
    <profile>
      <id>pragmatics</id>

      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>

      <modules>
        <module>../plugins</module>
        <module>../features</module>
        <module>de.cau.cs.kieler.pragmatics.repository</module>
      </modules>
    </profile>

    <!-- The KWebS product. -->
    <profile>
      <id>kwebs</id>

      <repositories>
        <!-- kieler pragmatics runtime -->
        <repository>
          <id>p2.nightly_pragmatics</id>
          <layout>p2</layout>
          <url>${kieler.pragmatics.nightly}</url>
        </repository>
      </repositories>

      <modules>
        <module>de.cau.cs.kieler.pragmatics.targetplatform</module>
        <module>../plugins/de.cau.cs.kieler.kwebs.server</module>
        <module>../features/de.cau.cs.kieler.kwebs.server.feature</module>
        <module>de.cau.cs.kieler.kwebs.repository</module>
      </modules>
    </profile>

    <!-- The Ptolemy RCP. -->
    <profile>
      <id>ptolemy-rcp</id>

      <repositories>
        <!-- kieler pragmatics runtime -->
        <repository>
          <id>p2.nightly_pragmatics</id>
          <layout>p2</layout>
          <url>${kieler.pragmatics.nightly}</url>
        </repository>
      </repositories>

      <modules>
        <module>de.cau.cs.kieler.pragmatics.targetplatform</module>
        <module>../products/de.cau.cs.kieler.ptolemy.rcp</module>
        <module>de.cau.cs.kieler.ptolemy.rcp.repository</module>
      </modules>
    </profile>

  </profiles>


  <!-- Maven plugin repositories -->
  <pluginRepositories>
    <pluginRepository>
      <id>central</id>
      <name>Maven Plugin Repository</name>
      <url>http://repo1.maven.org/maven2</url>
    </pluginRepository>

    <pluginRepository>
      <id>jboss-releases</id>
      <name>JBoss Releases Maven Repository</name>
      <url>https://repository.jboss.org/nexus/content/repositories/releases/</url>
    </pluginRepository>

    <pluginRepository>
      <id>eclipse-elk-meta</id>
      <name>ELK Meta Data Language Compiler Maven Repository</name>
      <url>http://build.eclipse.org/modeling/elk/maven/meta/nightly</url>
    </pluginRepository>
  </pluginRepositories>


  <!-- Modify the build process to add Tycho and configure some utility plug-ins. -->
  <build>
    <plugins>
      <!-- we need tycho plugin to build eclipse plugins -->
      <plugin>
        <groupId>org.eclipse.tycho</groupId>
        <artifactId>tycho-maven-plugin</artifactId>
        <version>${tycho-version}</version>
        <extensions>true</extensions>
      </plugin>

      <plugin>
        <groupId>org.eclipse.tycho</groupId>
        <artifactId>tycho-source-plugin</artifactId>
        <version>${tycho-version}</version>
        <executions>
          <execution>
            <id>plugin-source</id>
            <goals>
              <goal>plugin-source</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Enable java assertions during junit test runs. -->
      <!-- The "enableAssertions" property is only available in the maven-surefire plugin. -->
      <plugin>
        <groupId>org.eclipse.tycho</groupId>
        <artifactId>tycho-surefire-plugin</artifactId>
        <version>${tycho-version}</version>
        <configuration>
          <argLine>-ea</argLine>
        </configuration>
      </plugin>


      <!-- as we have platform specific fragments we need to tell tycho about target platforms -->
      <plugin>
        <groupId>org.eclipse.tycho</groupId>
        <artifactId>target-platform-configuration</artifactId>
        <version>${tycho-version}</version>
        <configuration>

          <target>
            <artifact>
              <groupId>de.cau.cs.kieler</groupId>
              <artifactId>de.cau.cs.kieler.pragmatics.targetplatform</artifactId>
              <version>0.45.0-SNAPSHOT</version>
            </artifact>
          </target>

          <environments>
            <environment>
              <os>linux</os>
              <ws>gtk</ws>
              <arch>x86</arch>
            </environment>
            <environment>
              <os>linux</os>
              <ws>gtk</ws>
              <arch>x86_64</arch>
            </environment>
            <environment>
              <os>win32</os>
              <ws>win32</ws>
              <arch>x86</arch>
            </environment>
            <environment>
              <os>win32</os>
              <ws>win32</ws>
              <arch>x86_64</arch>
            </environment>
            <environment>
              <os>macosx</os>
              <ws>cocoa</ws>
              <arch>x86_64</arch>
            </environment>
          </environments>
        </configuration>
      </plugin>
    </plugins>

    <pluginManagement>
      <plugins>

        <!-- maven xtend plugin to tell maven how to compile xtend code -->
        <plugin>
          <groupId>org.eclipse.xtend</groupId>
          <artifactId>xtend-maven-plugin</artifactId>
          <version>${xtext-version}</version>
          <executions>
            <execution>
              <goals>
                <goal>compile</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <outputDirectory>${basedir}/xtend-gen</outputDirectory>
          </configuration>
        </plugin>

        <!-- generate code from melk files -->
        <plugin>
          <groupId>org.eclipse.xtext</groupId>
          <artifactId>xtext-maven-plugin</artifactId>
          <version>${xtext-version}</version>
          <executions>
            <execution>
              <goals>
                <goal>generate</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <languages>
              <language>
                <setup>org.eclipse.elk.core.meta.MetaDataStandaloneSetup</setup>
                <outputConfigurations>
                  <outputConfiguration>
                    <outputDirectory>${basedir}/src-gen/</outputDirectory>
                  </outputConfiguration>
                </outputConfigurations>
              </language>
            </languages>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>org.eclipse.elk</groupId>
              <artifactId>org.eclipse.elk.graph</artifactId>
              <version>${elk-version}-SNAPSHOT</version>
            </dependency>
            <dependency>
              <groupId>org.eclipse.elk</groupId>
              <artifactId>org.eclipse.elk.core.meta</artifactId>
              <version>${elk-version}-SNAPSHOT</version>
            </dependency>
          </dependencies>
        </plugin>

        <!-- add src-gen and xtend-gen to source-directories -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>1.3</version>
          <executions>
            <execution>
              <id>add-source</id>
              <phase>generate-sources</phase>
              <goals>
                <goal>add-source</goal>
              </goals>
              <configuration>
                <sources>
                  <source>src-gen</source>
                </sources>
                <sources>
                  <source>${project.build.directory}/xtend-gen</source>
                </sources>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- generated code needs cleanup too -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>2.4.1</version>
          <configuration>
            <filesets>
              <fileset>
                <directory>xtend-gen</directory>
                <includes>
                  <include>**</include>
                </includes>
              </fileset>
            </filesets>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
